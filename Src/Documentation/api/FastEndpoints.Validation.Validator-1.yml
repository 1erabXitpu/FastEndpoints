### YamlMime:ManagedReference
items:
- uid: FastEndpoints.Validation.Validator`1
  commentId: T:FastEndpoints.Validation.Validator`1
  id: Validator`1
  parent: FastEndpoints.Validation
  children:
  - FastEndpoints.Validation.Validator`1.Resolve(Type)
  - FastEndpoints.Validation.Validator`1.Resolve``1
  - FastEndpoints.Validation.Validator`1.ServiceProvider
  - FastEndpoints.Validation.Validator`1.TryResolve(Type)
  - FastEndpoints.Validation.Validator`1.TryResolve``1
  langs:
  - csharp
  - vb
  name: Validator<TRequest>
  nameWithType: Validator<TRequest>
  fullName: FastEndpoints.Validation.Validator<TRequest>
  type: Class
  source:
    id: Validator
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Validator.cs
    startLine: 4
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints.Validation
  syntax:
    content: 'public abstract class Validator<TRequest> : AbstractValidator<TRequest>, IHasServiceProvider where TRequest : class'
    typeParameters:
    - id: TRequest
    content.vb: >-
      Public MustInherit Class Validator(Of TRequest As Class)

          Inherits AbstractValidator(Of TRequest)

          Implements IHasServiceProvider
  inheritance:
  - System.Object
  nameWithType.vb: Validator(Of TRequest)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest)
  name.vb: Validator(Of TRequest)
- uid: FastEndpoints.Validation.Validator`1.ServiceProvider
  commentId: P:FastEndpoints.Validation.Validator`1.ServiceProvider
  id: ServiceProvider
  parent: FastEndpoints.Validation.Validator`1
  langs:
  - csharp
  - vb
  name: ServiceProvider
  nameWithType: Validator<TRequest>.ServiceProvider
  fullName: FastEndpoints.Validation.Validator<TRequest>.ServiceProvider
  type: Property
  source:
    id: ServiceProvider
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Validator.cs
    startLine: 7
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints.Validation
  syntax:
    content: public IServiceProvider ServiceProvider { get; set; }
    parameters: []
    return:
      type: IServiceProvider
    content.vb: Public Property ServiceProvider As IServiceProvider
  overload: FastEndpoints.Validation.Validator`1.ServiceProvider*
  nameWithType.vb: Validator(Of TRequest).ServiceProvider
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).ServiceProvider
- uid: FastEndpoints.Validation.Validator`1.TryResolve``1
  commentId: M:FastEndpoints.Validation.Validator`1.TryResolve``1
  id: TryResolve``1
  parent: FastEndpoints.Validation.Validator`1
  langs:
  - csharp
  - vb
  name: TryResolve<TService>()
  nameWithType: Validator<TRequest>.TryResolve<TService>()
  fullName: FastEndpoints.Validation.Validator<TRequest>.TryResolve<TService>()
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Validator.cs
    startLine: 14
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints.Validation
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: protected TService TryResolve<TService>()
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Protected Function TryResolve(Of TService) As TService
  overload: FastEndpoints.Validation.Validator`1.TryResolve*
  nameWithType.vb: Validator(Of TRequest).TryResolve(Of TService)()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).TryResolve(Of TService)()
  name.vb: TryResolve(Of TService)()
- uid: FastEndpoints.Validation.Validator`1.TryResolve(Type)
  commentId: M:FastEndpoints.Validation.Validator`1.TryResolve(Type)
  id: TryResolve(Type)
  parent: FastEndpoints.Validation.Validator`1
  langs:
  - csharp
  - vb
  name: TryResolve(Type)
  nameWithType: Validator<TRequest>.TryResolve(Type)
  fullName: FastEndpoints.Validation.Validator<TRequest>.TryResolve(Type)
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Validator.cs
    startLine: 19
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints.Validation
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: protected object TryResolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Protected Function TryResolve(typeOfService As Type) As Object
  overload: FastEndpoints.Validation.Validator`1.TryResolve*
  nameWithType.vb: Validator(Of TRequest).TryResolve(Type)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).TryResolve(Type)
- uid: FastEndpoints.Validation.Validator`1.Resolve``1
  commentId: M:FastEndpoints.Validation.Validator`1.Resolve``1
  id: Resolve``1
  parent: FastEndpoints.Validation.Validator`1
  langs:
  - csharp
  - vb
  name: Resolve<TService>()
  nameWithType: Validator<TRequest>.Resolve<TService>()
  fullName: FastEndpoints.Validation.Validator<TRequest>.Resolve<TService>()
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Validator.cs
    startLine: 26
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints.Validation
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: protected TService Resolve<TService>()
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Protected Function Resolve(Of TService) As TService
  overload: FastEndpoints.Validation.Validator`1.Resolve*
  nameWithType.vb: Validator(Of TRequest).Resolve(Of TService)()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).Resolve(Of TService)()
  name.vb: Resolve(Of TService)()
- uid: FastEndpoints.Validation.Validator`1.Resolve(Type)
  commentId: M:FastEndpoints.Validation.Validator`1.Resolve(Type)
  id: Resolve(Type)
  parent: FastEndpoints.Validation.Validator`1
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: Validator<TRequest>.Resolve(Type)
  fullName: FastEndpoints.Validation.Validator<TRequest>.Resolve(Type)
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Validator.cs
    startLine: 33
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints.Validation
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: protected object Resolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Protected Function Resolve(typeOfService As Type) As Object
  overload: FastEndpoints.Validation.Validator`1.Resolve*
  nameWithType.vb: Validator(Of TRequest).Resolve(Type)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).Resolve(Type)
references:
- uid: FastEndpoints.Validation
  commentId: N:FastEndpoints.Validation
  name: FastEndpoints.Validation
  nameWithType: FastEndpoints.Validation
  fullName: FastEndpoints.Validation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.Validation.Validator`1.ServiceProvider*
  commentId: Overload:FastEndpoints.Validation.Validator`1.ServiceProvider
  name: ServiceProvider
  nameWithType: Validator<TRequest>.ServiceProvider
  fullName: FastEndpoints.Validation.Validator<TRequest>.ServiceProvider
  nameWithType.vb: Validator(Of TRequest).ServiceProvider
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).ServiceProvider
- uid: IServiceProvider
  commentId: '!:IServiceProvider'
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: FastEndpoints.Validation.Validator`1.TryResolve*
  commentId: Overload:FastEndpoints.Validation.Validator`1.TryResolve
  name: TryResolve
  nameWithType: Validator<TRequest>.TryResolve
  fullName: FastEndpoints.Validation.Validator<TRequest>.TryResolve
  nameWithType.vb: Validator(Of TRequest).TryResolve
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).TryResolve
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: FastEndpoints.Validation.Validator`1.Resolve*
  commentId: Overload:FastEndpoints.Validation.Validator`1.Resolve
  name: Resolve
  nameWithType: Validator<TRequest>.Resolve
  fullName: FastEndpoints.Validation.Validator<TRequest>.Resolve
  nameWithType.vb: Validator(Of TRequest).Resolve
  fullName.vb: FastEndpoints.Validation.Validator(Of TRequest).Resolve
