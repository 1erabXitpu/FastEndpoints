### YamlMime:ManagedReference
items:
- uid: FastEndpoints.EntityMapper`3
  commentId: T:FastEndpoints.EntityMapper`3
  id: EntityMapper`3
  parent: FastEndpoints
  children:
  - FastEndpoints.EntityMapper`3.FromEntity(`2)
  - FastEndpoints.EntityMapper`3.FromEntityAsync(`2)
  - FastEndpoints.EntityMapper`3.Resolve(Type)
  - FastEndpoints.EntityMapper`3.Resolve``1
  - FastEndpoints.EntityMapper`3.ServiceProvider
  - FastEndpoints.EntityMapper`3.ToEntity(`0)
  - FastEndpoints.EntityMapper`3.ToEntityAsync(`0)
  - FastEndpoints.EntityMapper`3.TryResolve(Type)
  - FastEndpoints.EntityMapper`3.TryResolve``1
  langs:
  - csharp
  - vb
  name: EntityMapper<TRequest, TResponse, TEntity>
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>
  type: Class
  source:
    id: EntityMapper
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 11
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nuse this base class to define domain entity mappers for your endpoints.\n"
  example: []
  syntax:
    content: >-
      public abstract class EntityMapper<TRequest, TResponse, TEntity> : IEntityMapper, IServiceResolver where TRequest : new()
          where TResponse : new()
    typeParameters:
    - id: TRequest
      description: the type of request dto
    - id: TResponse
      description: the type of response dto
    - id: TEntity
      description: the type of domain entity to map to/from
    content.vb: >-
      Public MustInherit Class EntityMapper(Of TRequest As New, TResponse As New, TEntity)
          Implements IEntityMapper, IServiceResolver
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity)
  name.vb: EntityMapper(Of TRequest, TResponse, TEntity)
- uid: FastEndpoints.EntityMapper`3.ServiceProvider
  commentId: P:FastEndpoints.EntityMapper`3.ServiceProvider
  id: ServiceProvider
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: ServiceProvider
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.ServiceProvider
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.ServiceProvider
  type: Property
  source:
    id: ServiceProvider
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 13
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  syntax:
    content: public IServiceProvider ServiceProvider { get; set; }
    parameters: []
    return:
      type: IServiceProvider
    content.vb: Public Property ServiceProvider As IServiceProvider
  overload: FastEndpoints.EntityMapper`3.ServiceProvider*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).ServiceProvider
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).ServiceProvider
- uid: FastEndpoints.EntityMapper`3.ToEntity(`0)
  commentId: M:FastEndpoints.EntityMapper`3.ToEntity(`0)
  id: ToEntity(`0)
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: ToEntity(TRequest)
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.ToEntity(TRequest)
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.ToEntity(TRequest)
  type: Method
  source:
    id: ToEntity
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 19
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\noverride this method and place the logic for mapping the request dto to the desired domain entity\n"
  example: []
  syntax:
    content: public virtual TEntity ToEntity(TRequest r)
    parameters:
    - id: r
      type: '{TRequest}'
      description: the request dto
    return:
      type: '{TEntity}'
    content.vb: Public Overridable Function ToEntity(r As TRequest) As TEntity
  overload: FastEndpoints.EntityMapper`3.ToEntity*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).ToEntity(TRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).ToEntity(TRequest)
- uid: FastEndpoints.EntityMapper`3.ToEntityAsync(`0)
  commentId: M:FastEndpoints.EntityMapper`3.ToEntityAsync(`0)
  id: ToEntityAsync(`0)
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: ToEntityAsync(TRequest)
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.ToEntityAsync(TRequest)
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.ToEntityAsync(TRequest)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 24
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\noverride this method and place the logic for mapping the request dto to the desired domain entity\n"
  example: []
  syntax:
    content: public virtual Task<TEntity> ToEntityAsync(TRequest r)
    parameters:
    - id: r
      type: '{TRequest}'
      description: the request dto to map from
    return:
      type: Task{{TEntity}}
    content.vb: Public Overridable Function ToEntityAsync(r As TRequest) As Task(Of TEntity)
  overload: FastEndpoints.EntityMapper`3.ToEntityAsync*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).ToEntityAsync(TRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).ToEntityAsync(TRequest)
- uid: FastEndpoints.EntityMapper`3.FromEntity(`2)
  commentId: M:FastEndpoints.EntityMapper`3.FromEntity(`2)
  id: FromEntity(`2)
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: FromEntity(TEntity)
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.FromEntity(TEntity)
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.FromEntity(TEntity)
  type: Method
  source:
    id: FromEntity
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 30
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\noverride this method and place the logic for mapping a domain entity to a response dto\n"
  example: []
  syntax:
    content: public virtual TResponse FromEntity(TEntity e)
    parameters:
    - id: e
      type: '{TEntity}'
      description: the domain entity to map from
    return:
      type: '{TResponse}'
    content.vb: Public Overridable Function FromEntity(e As TEntity) As TResponse
  overload: FastEndpoints.EntityMapper`3.FromEntity*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).FromEntity(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).FromEntity(TEntity)
- uid: FastEndpoints.EntityMapper`3.FromEntityAsync(`2)
  commentId: M:FastEndpoints.EntityMapper`3.FromEntityAsync(`2)
  id: FromEntityAsync(`2)
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: FromEntityAsync(TEntity)
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.FromEntityAsync(TEntity)
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.FromEntityAsync(TEntity)
  type: Method
  source:
    id: FromEntityAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 35
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\noverride this method and place the logic for mapping a domain entity to a response dto\n"
  example: []
  syntax:
    content: public virtual Task<TResponse> FromEntityAsync(TEntity e)
    parameters:
    - id: e
      type: '{TEntity}'
      description: the domain entity to map from
    return:
      type: Task{{TResponse}}
    content.vb: Public Overridable Function FromEntityAsync(e As TEntity) As Task(Of TResponse)
  overload: FastEndpoints.EntityMapper`3.FromEntityAsync*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).FromEntityAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).FromEntityAsync(TEntity)
- uid: FastEndpoints.EntityMapper`3.TryResolve``1
  commentId: M:FastEndpoints.EntityMapper`3.TryResolve``1
  id: TryResolve``1
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: TryResolve<TService>()
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.TryResolve<TService>()
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.TryResolve<TService>()
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 41
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: public TService TryResolve<TService>()
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function TryResolve(Of TService) As TService
  overload: FastEndpoints.EntityMapper`3.TryResolve*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).TryResolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).TryResolve(Of TService)()
  name.vb: TryResolve(Of TService)()
- uid: FastEndpoints.EntityMapper`3.TryResolve(Type)
  commentId: M:FastEndpoints.EntityMapper`3.TryResolve(Type)
  id: TryResolve(Type)
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: TryResolve(Type)
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.TryResolve(Type)
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.TryResolve(Type)
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 46
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: public object TryResolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function TryResolve(typeOfService As Type) As Object
  overload: FastEndpoints.EntityMapper`3.TryResolve*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).TryResolve(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).TryResolve(Type)
- uid: FastEndpoints.EntityMapper`3.Resolve``1
  commentId: M:FastEndpoints.EntityMapper`3.Resolve``1
  id: Resolve``1
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: Resolve<TService>()
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.Resolve<TService>()
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.Resolve<TService>()
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 52
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: public TService Resolve<TService>()
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function Resolve(Of TService) As TService
  overload: FastEndpoints.EntityMapper`3.Resolve*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).Resolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).Resolve(Of TService)()
  name.vb: Resolve(Of TService)()
- uid: FastEndpoints.EntityMapper`3.Resolve(Type)
  commentId: M:FastEndpoints.EntityMapper`3.Resolve(Type)
  id: Resolve(Type)
  parent: FastEndpoints.EntityMapper`3
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.Resolve(Type)
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.Resolve(Type)
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\EntityMapper.cs
    startLine: 58
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: public object Resolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function Resolve(typeOfService As Type) As Object
  overload: FastEndpoints.EntityMapper`3.Resolve*
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).Resolve(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).Resolve(Type)
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.EntityMapper`3.ServiceProvider*
  commentId: Overload:FastEndpoints.EntityMapper`3.ServiceProvider
  name: ServiceProvider
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.ServiceProvider
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.ServiceProvider
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).ServiceProvider
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).ServiceProvider
- uid: IServiceProvider
  commentId: '!:IServiceProvider'
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: FastEndpoints.EntityMapper`3.ToEntity*
  commentId: Overload:FastEndpoints.EntityMapper`3.ToEntity
  name: ToEntity
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.ToEntity
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.ToEntity
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).ToEntity
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).ToEntity
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: FastEndpoints.EntityMapper`3.ToEntityAsync*
  commentId: Overload:FastEndpoints.EntityMapper`3.ToEntityAsync
  name: ToEntityAsync
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.ToEntityAsync
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.ToEntityAsync
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).ToEntityAsync
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).ToEntityAsync
- uid: Task{{TEntity}}
  commentId: '!:Task{`2}'
  definition: Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.EntityMapper`3.FromEntity*
  commentId: Overload:FastEndpoints.EntityMapper`3.FromEntity
  name: FromEntity
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.FromEntity
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.FromEntity
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).FromEntity
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).FromEntity
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: FastEndpoints.EntityMapper`3.FromEntityAsync*
  commentId: Overload:FastEndpoints.EntityMapper`3.FromEntityAsync
  name: FromEntityAsync
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.FromEntityAsync
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.FromEntityAsync
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).FromEntityAsync
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).FromEntityAsync
- uid: Task{{TResponse}}
  commentId: '!:Task{`1}'
  definition: Task`1
  name: Task<TResponse>
  nameWithType: Task<TResponse>
  fullName: Task<TResponse>
  nameWithType.vb: Task(Of TResponse)
  fullName.vb: Task(Of TResponse)
  name.vb: Task(Of TResponse)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.EntityMapper`3.TryResolve*
  commentId: Overload:FastEndpoints.EntityMapper`3.TryResolve
  name: TryResolve
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.TryResolve
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.TryResolve
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).TryResolve
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).TryResolve
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: FastEndpoints.EntityMapper`3.Resolve*
  commentId: Overload:FastEndpoints.EntityMapper`3.Resolve
  name: Resolve
  nameWithType: EntityMapper<TRequest, TResponse, TEntity>.Resolve
  fullName: FastEndpoints.EntityMapper<TRequest, TResponse, TEntity>.Resolve
  nameWithType.vb: EntityMapper(Of TRequest, TResponse, TEntity).Resolve
  fullName.vb: FastEndpoints.EntityMapper(Of TRequest, TResponse, TEntity).Resolve
