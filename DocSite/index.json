{
  "api/FastEndpoints.AsyncEventHandler-1.html": {
    "href": "api/FastEndpoints.AsyncEventHandler-1.html",
    "title": "Delegate AsyncEventHandler<TEventArgs> | FastEndpoints",
    "keywords": "Delegate AsyncEventHandler<TEventArgs> Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public delegate Task AsyncEventHandler<TEventArgs>(TEventArgs args, CancellationToken cancellation); Parameters Type Name Description TEventArgs args CancellationToken cancellation Returns Type Description Task Type Parameters Name Description TEventArgs"
  },
  "api/FastEndpoints.BaseEndpoint.html": {
    "href": "api/FastEndpoints.BaseEndpoint.html",
    "title": "Class BaseEndpoint | FastEndpoints",
    "keywords": "Class BaseEndpoint base class for all endpoint classes Inheritance System.Object BaseEndpoint Endpoint<TRequest, TResponse> Implements IEndpoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class BaseEndpoint : IEndpoint Implements IEndpoint"
  },
  "api/FastEndpoints.BaseEventHandler.html": {
    "href": "api/FastEndpoints.BaseEventHandler.html",
    "title": "Class BaseEventHandler | FastEndpoints",
    "keywords": "Class BaseEventHandler Inheritance System.Object BaseEventHandler FastEventHandler<TEvent> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class BaseEventHandler"
  },
  "api/FastEndpoints.Constants.html": {
    "href": "api/FastEndpoints.Constants.html",
    "title": "Class Constants | FastEndpoints",
    "keywords": "Class Constants Inheritance System.Object Constants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public static class Constants Fields PermissionsClaimType Declaration public const string PermissionsClaimType = \"prm\" Field Value Type Description System.String"
  },
  "api/FastEndpoints.EmptyRequest.html": {
    "href": "api/FastEndpoints.EmptyRequest.html",
    "title": "Class EmptyRequest | FastEndpoints",
    "keywords": "Class EmptyRequest a request dto that doesn't have any properties Inheritance System.Object EmptyRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public class EmptyRequest"
  },
  "api/FastEndpoints.EmptyResponse.html": {
    "href": "api/FastEndpoints.EmptyResponse.html",
    "title": "Class EmptyResponse | FastEndpoints",
    "keywords": "Class EmptyResponse a response dto that doesn't have any properties Inheritance System.Object EmptyResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public class EmptyResponse"
  },
  "api/FastEndpoints.Endpoint-1.html": {
    "href": "api/FastEndpoints.Endpoint-1.html",
    "title": "Class Endpoint<TRequest> | FastEndpoints",
    "keywords": "Class Endpoint<TRequest> use this base class for defining endpoints that only use a request dto and don't use a response dto. Inheritance System.Object BaseEndpoint Endpoint <TRequest, System.Object > Endpoint<TRequest> EndpointWithoutRequest Implements IEndpoint Inherited Members Endpoint<TRequest, Object>.HttpContext Endpoint<TRequest, Object>.User Endpoint<TRequest, Object>.Response Endpoint<TRequest, Object>.Config Endpoint<TRequest, Object>.Env Endpoint<TRequest, Object>.Logger Endpoint<TRequest, Object>.BaseURL Endpoint<TRequest, Object>.HttpMethod Endpoint<TRequest, Object>.ValidationFailures Endpoint<TRequest, Object>.ValidationFailed Endpoint<TRequest, Object>.Form Endpoint<TRequest, Object>.Files Endpoint<TRequest, Object>.Routes(String[]) Endpoint<TRequest, Object>.Verbs(Http[]) Endpoint<TRequest, Object>.DontThrowIfValidationFails() Endpoint<TRequest, Object>.AllowAnnonymous() Endpoint<TRequest, Object>.AllowFileUploads() Endpoint<TRequest, Object>.Policies(String[]) Endpoint<TRequest, Object>.Roles(String[]) Endpoint<TRequest, Object>.Permissions(String[]) Endpoint<TRequest, Object>.Permissions(Boolean, String[]) Endpoint<TRequest, Object>.Claims(String[]) Endpoint<TRequest, Object>.Claims(Boolean, String[]) Endpoint<TRequest, Object>.PreProcessors(IPreProcessor<TRequest>[]) Endpoint<TRequest, Object>.PostProcessors(IPostProcessor<TRequest, Object>[]) Endpoint<TRequest, Object>.Options(Action<DelegateEndpointConventionBuilder>) Endpoint<TRequest, Object>.HandleAsync(TRequest, CancellationToken) Endpoint<TRequest, Object>.AddError(String) Endpoint<TRequest, Object>.AddError(Expression<Func<TRequest, Object>>, String) Endpoint<TRequest, Object>.ThrowIfAnyErrors() Endpoint<TRequest, Object>.ThrowError(String) Endpoint<TRequest, Object>.ThrowError(Expression<Func<TRequest, Object>>, String) Endpoint<TRequest, Object>.SendAsync(Object, Int32, CancellationToken) Endpoint<TRequest, Object>.SendOkAsync() Endpoint<TRequest, Object>.SendErrorsAsync(CancellationToken) Endpoint<TRequest, Object>.SendNoContentAsync() Endpoint<TRequest, Object>.SendNotFoundAsync() Endpoint<TRequest, Object>.SendUnauthorizedAsync() Endpoint<TRequest, Object>.SendForbiddenAsync() Endpoint<TRequest, Object>.SendBytesAsync(Byte[], String, String, CancellationToken) Endpoint<TRequest, Object>.SendFileAsync(FileInfo, String, CancellationToken) Endpoint<TRequest, Object>.SendStreamAsync(Stream, String, Nullable<Int64>, String, CancellationToken) Endpoint<TRequest, Object>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<TRequest, Object>.TryResolve<TService>() Endpoint<TRequest, Object>.TryResolve(Type) Endpoint<TRequest, Object>.Resolve<TService>() Endpoint<TRequest, Object>.Resolve(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class Endpoint<TRequest> : Endpoint<TRequest, object>, IEndpoint where TRequest : new() Type Parameters Name Description TRequest Implements IEndpoint"
  },
  "api/FastEndpoints.Endpoint-2.html": {
    "href": "api/FastEndpoints.Endpoint-2.html",
    "title": "Class Endpoint<TRequest, TResponse> | FastEndpoints",
    "keywords": "Class Endpoint<TRequest, TResponse> use this base class for defining endpoints that use both request and response dtos. Inheritance System.Object BaseEndpoint Endpoint<TRequest, TResponse> Endpoint<TRequest> EndpointWithoutRequest<TResponse> Implements IEndpoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class Endpoint<TRequest, TResponse> : BaseEndpoint, IEndpoint where TRequest : new() where TResponse : new() Type Parameters Name Description TRequest the type of the request dto TResponse the type of the response dto Properties BaseURL the base url of the current request Declaration protected string BaseURL { get; } Property Value Type Description System.String Config gives access to the configuration Declaration protected IConfiguration Config { get; } Property Value Type Description Microsoft.Extensions.Configuration.IConfiguration Env gives access to the hosting environment Declaration protected IWebHostEnvironment Env { get; } Property Value Type Description Microsoft.AspNetCore.Hosting.IWebHostEnvironment Files the files sent with the request. only populated is content-type is 'multipart/form-data' Declaration protected IFormFileCollection Files { get; } Property Value Type Description Microsoft.AspNetCore.Http.IFormFileCollection Form the form sent with the request. only populated if content-type is 'application/x-www-form-urlencoded' or 'multipart/form-data' Declaration protected IFormCollection Form { get; } Property Value Type Description Microsoft.AspNetCore.Http.IFormCollection HttpContext the http context of the current request Declaration protected HttpContext HttpContext { get; } Property Value Type Description Microsoft.AspNetCore.Http.HttpContext HttpMethod the http method of the current request Declaration protected Http HttpMethod { get; } Property Value Type Description Http Logger the logger for the current endpoint type Declaration protected ILogger Logger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger Response the response that is sent to the client. Declaration protected TResponse Response { get; set; } Property Value Type Description TResponse User the current user principal Declaration protected ClaimsPrincipal User { get; } Property Value Type Description System.Security.Claims.ClaimsPrincipal ValidationFailed indicates if there are any validation failures for the current request Declaration public bool ValidationFailed { get; } Property Value Type Description System.Boolean ValidationFailures the list of validation failures for the current request dto Declaration public List<ValidationFailure> ValidationFailures { get; } Property Value Type Description List < ValidationFailure > Methods AddError(Expression<Func<TRequest, Object>>, String) adds an error message for the specified property of the request dto Declaration protected void AddError(Expression<Func<TRequest, object>> property, string errorMessage) Parameters Type Name Description System.Linq.Expressions.Expression < Func <TRequest, System.Object >> property the property to add teh error message for System.String errorMessage the error message AddError(String) adds a \"GeneralError\" to the current list of validation failures Declaration protected void AddError(string message) Parameters Type Name Description System.String message the error message AllowAnnonymous() allow unauthenticated requests to this endpoint Declaration protected void AllowAnnonymous() AllowFileUploads() enable file uploads with multipart/form-data content type Declaration protected void AllowFileUploads() Claims(Boolean, String[]) specify the claim types a user principal should posses in order to access this endpoint. Declaration protected void Claims(bool allowAny, params string[] claims) Parameters Type Name Description System.Boolean allowAny if set to true, having any 1 of the specified permissions will enable access System.String [] claims the claims Claims(String[]) specify the claim types a user principal should posses in order to access this endpoint. they must posses ALL of the claim types mentioned here. if not, a 403 forbidden response will be sent. Declaration protected void Claims(params string[] claims) Parameters Type Name Description System.String [] claims the claims needed to access this endpoint DontThrowIfValidationFails() disable auto validation failure responses (400 bad request with error details) for this endpoint Declaration protected void DontThrowIfValidationFails() HandleAsync(TRequest, CancellationToken) the handler method for the endpoint. this method is called for each request received. Declaration protected abstract Task HandleAsync(TRequest req, CancellationToken ct) Parameters Type Name Description TRequest req the request dto CancellationToken ct a cancellation token Returns Type Description Task Options(Action<DelegateEndpointConventionBuilder>) set endpoint configurations options using an endpoint builder action Declaration protected void Options(Action<DelegateEndpointConventionBuilder> builder) Parameters Type Name Description Action < Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder > builder the builder for this endpoint Permissions(Boolean, String[]) specify the permissions a user principal should posses in order to access this endpoint. Declaration protected void Permissions(bool allowAny, params string[] permissions) Parameters Type Name Description System.Boolean allowAny if set to true, having any 1 of the specified permissions will enable access System.String [] permissions the permissions Permissions(String[]) specify the permissions a user principal should posses in order to access this endpoint. they must posses ALL of the permissions mentioned here. if not, a 403 forbidden response will be sent. Declaration protected void Permissions(params string[] permissions) Parameters Type Name Description System.String [] permissions the permissions needed to access this endpoint Policies(String[]) specify one or more authorization policy names you have added to the middleware pipeline during app startup/ service configuration that should be applied to this endpoint. Declaration protected void Policies(params string[] policyNames) Parameters Type Name Description System.String [] policyNames one or more policy names (must have been added to the pipeline on startup) PostProcessors(IPostProcessor<TRequest, TResponse>[]) configure a collection of post-processors to be executed after the main handler function is done. processors are executed in the order they are defined here. Declaration protected void PostProcessors(params IPostProcessor<TRequest, TResponse>[] postProcessors) Parameters Type Name Description IPostProcessor <TRequest, TResponse>[] postProcessors the post processors to be executed PreProcessors(IPreProcessor<TRequest>[]) configure a collection of pre-processors to be executed before the main handler function is called. processors are executed in the order they are defined here. Declaration protected void PreProcessors(params IPreProcessor<TRequest>[] preProcessors) Parameters Type Name Description IPreProcessor <TRequest>[] preProcessors the pre processors to be executed PublishAsync<TEvent>(TEvent, Mode, CancellationToken) publish the given model/dto to all the subscribers of the event notification Declaration protected Task PublishAsync<TEvent>(TEvent eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = null) where TEvent : class Parameters Type Name Description TEvent eventModel the notification event model/dto to publish Mode waitMode specify whether to wait for none, any or all of the subscribers to complete their work CancellationToken cancellation an optional cancellation token Returns Type Description Task a Task that matches the wait mode specified. Mode.WaitForNone returns an already completed Task (fire and forget). Mode.WaitForAny returns a Task that will complete when any of the subscribers complete their work. Mode.WaitForAll return a Task that will complete only when all of the subscribers complete their work. Type Parameters Name Description TEvent Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration protected object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description System.Object Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration protected TService Resolve<TService>() Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Roles(String[]) specify that the current claim principal/ user should posses at least one of the roles (claim type) mentioned here. access will be forbidden if the user doesn't have any of the specified roles. Declaration protected void Roles(params string[] rolesNames) Parameters Type Name Description System.String [] rolesNames one or more roles that has access Routes(String[]) specify one or more route patterns this endpoint should be listening for Declaration protected void Routes(params string[] patterns) Parameters Type Name Description System.String [] patterns SendAsync(TResponse, Int32, CancellationToken) send the supplied response dto serialized as json to the client. Declaration protected Task SendAsync(TResponse response, int statusCode = 200, CancellationToken cancellation = null) Parameters Type Name Description TResponse response the object to serialize to json System.Int32 statusCode optional custom http status code CancellationToken cancellation optional cancellation token Returns Type Description Task SendBytesAsync(Byte[], String, String, CancellationToken) send a byte array to the client Declaration protected async Task SendBytesAsync(byte[] bytes, string fileName = null, string contentType = \"application/octet-stream\", CancellationToken cancellation = null) Parameters Type Name Description System.Byte [] bytes the bytes to send System.String fileName System.String contentType optional content type to set on the http response CancellationToken cancellation optional cancellation token Returns Type Description Task SendErrorsAsync(CancellationToken) send a 400 bad request with error details of the current validation failures Declaration protected Task SendErrorsAsync(CancellationToken cancellation = null) Parameters Type Name Description CancellationToken cancellation Returns Type Description Task SendFileAsync(FileInfo, String, CancellationToken) send a file to the client Declaration protected Task SendFileAsync(FileInfo fileInfo, string contentType = \"application/octet-stream\", CancellationToken cancellation = null) Parameters Type Name Description FileInfo fileInfo System.String contentType optional content type to set on the http response CancellationToken cancellation optional cancellation token Returns Type Description Task SendForbiddenAsync() send a 403 unauthorized response Declaration protected Task SendForbiddenAsync() Returns Type Description Task SendNoContentAsync() send a 204 no content response Declaration protected Task SendNoContentAsync() Returns Type Description Task SendNotFoundAsync() send a 404 not found response Declaration protected Task SendNotFoundAsync() Returns Type Description Task SendOkAsync() send an http 200 ok response without any body Declaration protected Task SendOkAsync() Returns Type Description Task SendStreamAsync(Stream, String, Nullable<Int64>, String, CancellationToken) send the contents of a stream to the client Declaration protected Task SendStreamAsync(Stream stream, string fileName = null, long? fileLengthBytes = null, string contentType = \"application/octet-stream\", CancellationToken cancellation = null) Parameters Type Name Description Stream stream the stream to read the data from System.String fileName and optional file name to set in the content-disposition header System.Nullable < System.Int64 > fileLengthBytes optional total size of the file/stream System.String contentType optional content type to set on the http response CancellationToken cancellation optional cancellation token Returns Type Description Task SendUnauthorizedAsync() send a 401 unauthorized response Declaration protected Task SendUnauthorizedAsync() Returns Type Description Task ThrowError(Expression<Func<TRequest, Object>>, String) adds an error message for the specified property of the request dto and sends back a 400 bad request with error details immediately interrupting handler execution flow. no execution will continue past this call. Declaration protected void ThrowError(Expression<Func<TRequest, object>> property, string errorMessage) Parameters Type Name Description System.Linq.Expressions.Expression < Func <TRequest, System.Object >> property System.String errorMessage ThrowError(String) add a \"GeneralError\" to the validation failure list and send back a 400 bad request with error details immediately interrupting handler execution flow. if there are any vallidation failures, no execution will continue past this call. Declaration protected void ThrowError(string message) Parameters Type Name Description System.String message the error message ThrowIfAnyErrors() interrupt the flow of handler execution and send a 400 bad request with error details if there are any validation failures in the current request. if there are no validation failures, execution will continue past this call. Declaration protected void ThrowIfAnyErrors() TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration protected object TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description System.Object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration protected TService TryResolve<TService>() Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Verbs(Http[]) specify one or more http method verbs this endpoint should be accepting requests for Declaration protected void Verbs(params Http[] methods) Parameters Type Name Description Http [] methods Implements IEndpoint"
  },
  "api/FastEndpoints.EndpointExecutor.html": {
    "href": "api/FastEndpoints.EndpointExecutor.html",
    "title": "Class EndpointExecutor | FastEndpoints",
    "keywords": "Class EndpointExecutor Inheritance System.Object EndpointExecutor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public static class EndpointExecutor Methods HandleAsync(HttpContext, CancellationToken) Declaration public static Task HandleAsync(HttpContext ctx, CancellationToken cancellation) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext ctx CancellationToken cancellation Returns Type Description Task"
  },
  "api/FastEndpoints.EndpointWithoutRequest.html": {
    "href": "api/FastEndpoints.EndpointWithoutRequest.html",
    "title": "Class EndpointWithoutRequest | FastEndpoints",
    "keywords": "Class EndpointWithoutRequest use this base class for defining endpoints that doesn't need a request dto. usually used for routes that doesn't have any parameters. Inheritance System.Object BaseEndpoint Endpoint < EmptyRequest , System.Object > Endpoint < EmptyRequest > EndpointWithoutRequest Implements IEndpoint Inherited Members Endpoint<EmptyRequest, Object>.HttpContext Endpoint<EmptyRequest, Object>.User Endpoint<EmptyRequest, Object>.Response Endpoint<EmptyRequest, Object>.Config Endpoint<EmptyRequest, Object>.Env Endpoint<EmptyRequest, Object>.Logger Endpoint<EmptyRequest, Object>.BaseURL Endpoint<EmptyRequest, Object>.HttpMethod Endpoint<EmptyRequest, Object>.ValidationFailures Endpoint<EmptyRequest, Object>.ValidationFailed Endpoint<EmptyRequest, Object>.Form Endpoint<EmptyRequest, Object>.Files Endpoint<EmptyRequest, Object>.Routes(String[]) Endpoint<EmptyRequest, Object>.Verbs(Http[]) Endpoint<EmptyRequest, Object>.DontThrowIfValidationFails() Endpoint<EmptyRequest, Object>.AllowAnnonymous() Endpoint<EmptyRequest, Object>.AllowFileUploads() Endpoint<EmptyRequest, Object>.Policies(String[]) Endpoint<EmptyRequest, Object>.Roles(String[]) Endpoint<EmptyRequest, Object>.Permissions(String[]) Endpoint<EmptyRequest, Object>.Permissions(Boolean, String[]) Endpoint<EmptyRequest, Object>.Claims(String[]) Endpoint<EmptyRequest, Object>.Claims(Boolean, String[]) Endpoint<EmptyRequest, Object>.PreProcessors(IPreProcessor<EmptyRequest>[]) Endpoint<EmptyRequest, Object>.PostProcessors(IPostProcessor<EmptyRequest, Object>[]) Endpoint<EmptyRequest, Object>.Options(Action<DelegateEndpointConventionBuilder>) Endpoint<EmptyRequest, Object>.HandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, Object>.AddError(String) Endpoint<EmptyRequest, Object>.AddError(Expression<Func<EmptyRequest, Object>>, String) Endpoint<EmptyRequest, Object>.ThrowIfAnyErrors() Endpoint<EmptyRequest, Object>.ThrowError(String) Endpoint<EmptyRequest, Object>.ThrowError(Expression<Func<EmptyRequest, Object>>, String) Endpoint<EmptyRequest, Object>.SendAsync(Object, Int32, CancellationToken) Endpoint<EmptyRequest, Object>.SendOkAsync() Endpoint<EmptyRequest, Object>.SendErrorsAsync(CancellationToken) Endpoint<EmptyRequest, Object>.SendNoContentAsync() Endpoint<EmptyRequest, Object>.SendNotFoundAsync() Endpoint<EmptyRequest, Object>.SendUnauthorizedAsync() Endpoint<EmptyRequest, Object>.SendForbiddenAsync() Endpoint<EmptyRequest, Object>.SendBytesAsync(Byte[], String, String, CancellationToken) Endpoint<EmptyRequest, Object>.SendFileAsync(FileInfo, String, CancellationToken) Endpoint<EmptyRequest, Object>.SendStreamAsync(Stream, String, Nullable<Int64>, String, CancellationToken) Endpoint<EmptyRequest, Object>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<EmptyRequest, Object>.TryResolve<TService>() Endpoint<EmptyRequest, Object>.TryResolve(Type) Endpoint<EmptyRequest, Object>.Resolve<TService>() Endpoint<EmptyRequest, Object>.Resolve(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class EndpointWithoutRequest : Endpoint<EmptyRequest>, IEndpoint Implements IEndpoint"
  },
  "api/FastEndpoints.EndpointWithoutRequest-1.html": {
    "href": "api/FastEndpoints.EndpointWithoutRequest-1.html",
    "title": "Class EndpointWithoutRequest<TResponse> | FastEndpoints",
    "keywords": "Class EndpointWithoutRequest<TResponse> use this base class for defining endpoints that doesn't need a request dto but return a response dto. Inheritance System.Object BaseEndpoint Endpoint < EmptyRequest , TResponse> EndpointWithoutRequest<TResponse> Implements IEndpoint Inherited Members Endpoint<EmptyRequest, TResponse>.HttpContext Endpoint<EmptyRequest, TResponse>.User Endpoint<EmptyRequest, TResponse>.Response Endpoint<EmptyRequest, TResponse>.Config Endpoint<EmptyRequest, TResponse>.Env Endpoint<EmptyRequest, TResponse>.Logger Endpoint<EmptyRequest, TResponse>.BaseURL Endpoint<EmptyRequest, TResponse>.HttpMethod Endpoint<EmptyRequest, TResponse>.ValidationFailures Endpoint<EmptyRequest, TResponse>.ValidationFailed Endpoint<EmptyRequest, TResponse>.Form Endpoint<EmptyRequest, TResponse>.Files Endpoint<EmptyRequest, TResponse>.Routes(String[]) Endpoint<EmptyRequest, TResponse>.Verbs(Http[]) Endpoint<EmptyRequest, TResponse>.DontThrowIfValidationFails() Endpoint<EmptyRequest, TResponse>.AllowAnnonymous() Endpoint<EmptyRequest, TResponse>.AllowFileUploads() Endpoint<EmptyRequest, TResponse>.Policies(String[]) Endpoint<EmptyRequest, TResponse>.Roles(String[]) Endpoint<EmptyRequest, TResponse>.Permissions(String[]) Endpoint<EmptyRequest, TResponse>.Permissions(Boolean, String[]) Endpoint<EmptyRequest, TResponse>.Claims(String[]) Endpoint<EmptyRequest, TResponse>.Claims(Boolean, String[]) Endpoint<EmptyRequest, TResponse>.PreProcessors(IPreProcessor<EmptyRequest>[]) Endpoint<EmptyRequest, TResponse>.PostProcessors(IPostProcessor<EmptyRequest, TResponse>[]) Endpoint<EmptyRequest, TResponse>.Options(Action<DelegateEndpointConventionBuilder>) Endpoint<EmptyRequest, TResponse>.HandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.AddError(String) Endpoint<EmptyRequest, TResponse>.AddError(Expression<Func<EmptyRequest, Object>>, String) Endpoint<EmptyRequest, TResponse>.ThrowIfAnyErrors() Endpoint<EmptyRequest, TResponse>.ThrowError(String) Endpoint<EmptyRequest, TResponse>.ThrowError(Expression<Func<EmptyRequest, Object>>, String) Endpoint<EmptyRequest, TResponse>.SendAsync(TResponse, Int32, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendOkAsync() Endpoint<EmptyRequest, TResponse>.SendErrorsAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendNoContentAsync() Endpoint<EmptyRequest, TResponse>.SendNotFoundAsync() Endpoint<EmptyRequest, TResponse>.SendUnauthorizedAsync() Endpoint<EmptyRequest, TResponse>.SendForbiddenAsync() Endpoint<EmptyRequest, TResponse>.SendBytesAsync(Byte[], String, String, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendFileAsync(FileInfo, String, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendStreamAsync(Stream, String, Nullable<Int64>, String, CancellationToken) Endpoint<EmptyRequest, TResponse>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<EmptyRequest, TResponse>.TryResolve<TService>() Endpoint<EmptyRequest, TResponse>.TryResolve(Type) Endpoint<EmptyRequest, TResponse>.Resolve<TService>() Endpoint<EmptyRequest, TResponse>.Resolve(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class EndpointWithoutRequest<TResponse> : Endpoint<EmptyRequest, TResponse>, IEndpoint where TResponse : new() Type Parameters Name Description TResponse Implements IEndpoint"
  },
  "api/FastEndpoints.ErrorResponse.html": {
    "href": "api/FastEndpoints.ErrorResponse.html",
    "title": "Class ErrorResponse | FastEndpoints",
    "keywords": "Class ErrorResponse Inheritance System.Object ErrorResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public class ErrorResponse Constructors ErrorResponse() Declaration public ErrorResponse() ErrorResponse(IEnumerable<ValidationFailure>) Declaration public ErrorResponse(IEnumerable<ValidationFailure> failures) Parameters Type Name Description IEnumerable < ValidationFailure > failures Properties Errors Declaration public Dictionary<string, IEnumerable<string>> Errors { get; set; } Property Value Type Description Dictionary < System.String , IEnumerable < System.String >> Message Declaration public string Message { get; set; } Property Value Type Description System.String StatusCode Declaration public int StatusCode { get; set; } Property Value Type Description System.Int32"
  },
  "api/FastEndpoints.FastEventHandler-1.html": {
    "href": "api/FastEndpoints.FastEventHandler-1.html",
    "title": "Class FastEventHandler<TEvent> | FastEndpoints",
    "keywords": "Class FastEventHandler<TEvent> use this base class to handle events published by the notification system Inheritance System.Object BaseEventHandler FastEventHandler<TEvent> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public abstract class FastEventHandler<TEvent> : BaseEventHandler, IEventHandler where TEvent : class, new() Type Parameters Name Description TEvent the type of the event to handle Methods HandleAsync(TEvent, CancellationToken) this method will be called when an event of the specified type is published. Declaration public abstract Task HandleAsync(TEvent eventModel, CancellationToken ct) Parameters Type Name Description TEvent eventModel the event model/dto received CancellationToken ct an optional cancellation token Returns Type Description Task Resolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration protected object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description System.Object Resolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration protected TService Resolve<TService>() Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve"
  },
  "api/FastEndpoints.FromAttribute.html": {
    "href": "api/FastEndpoints.FromAttribute.html",
    "title": "Class FromAttribute | FastEndpoints",
    "keywords": "Class FromAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Inheritance System.Object FromClaimAttribute FromAttribute Inherited Members FromClaimAttribute.ClaimType FromClaimAttribute.IsRequired Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public class FromAttribute : FromClaimAttribute Constructors FromAttribute(String, Boolean) properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Declaration public FromAttribute(string claimType, bool isRequired = true) Parameters Type Name Description System.String claimType the claim type to auto bind System.Boolean isRequired set to true if a validation error should be thrown when the current user principal doesn't have the specified claim"
  },
  "api/FastEndpoints.FromClaimAttribute.html": {
    "href": "api/FastEndpoints.FromClaimAttribute.html",
    "title": "Class FromClaimAttribute | FastEndpoints",
    "keywords": "Class FromClaimAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Inheritance System.Object FromClaimAttribute FromAttribute Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public class FromClaimAttribute : Attribute Constructors FromClaimAttribute(String, Boolean) properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Declaration public FromClaimAttribute(string claimType, bool isRequired = true) Parameters Type Name Description System.String claimType the claim type to auto bind System.Boolean isRequired set to true if a validation error should be thrown when the current user principal doesn't have the specified claim Properties ClaimType the claim type to auto bind Declaration public string ClaimType { get; set; } Property Value Type Description System.String IsRequired set to true if a validation error should be thrown when the current user principal doesn't have the specified claim Declaration public bool IsRequired { get; set; } Property Value Type Description System.Boolean"
  },
  "api/FastEndpoints.html": {
    "href": "api/FastEndpoints.html",
    "title": "Namespace FastEndpoints | FastEndpoints",
    "keywords": "Namespace FastEndpoints Classes BaseEndpoint base class for all endpoint classes BaseEventHandler Constants EmptyRequest a request dto that doesn't have any properties EmptyResponse a response dto that doesn't have any properties Endpoint<TRequest> use this base class for defining endpoints that only use a request dto and don't use a response dto. Endpoint<TRequest, TResponse> use this base class for defining endpoints that use both request and response dtos. EndpointExecutor EndpointWithoutRequest use this base class for defining endpoints that doesn't need a request dto. usually used for routes that doesn't have any parameters. EndpointWithoutRequest<TResponse> use this base class for defining endpoints that doesn't need a request dto but return a response dto. ErrorResponse FastEventHandler<TEvent> use this base class to handle events published by the notification system FromAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal FromClaimAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal HttpClientExtensions MainExtensions Interfaces IEndpoint IPostProcessor<TRequest, TResponse> interface for defining post-processors to be executed after the main endpoint handler is done IPreProcessor<TRequest> interface for defining pre-processors to be executed before the main endpoint handler is called IRequest<TEntity> use this interface to add functionality to easily map a request dto to a given entity IResponse<TEntity> use this interface to populate a response dto from a given entity Enums Http enum for specifying a http verb Mode enum for specifying the waiting mode for event notifications Delegates AsyncEventHandler<TEventArgs>"
  },
  "api/FastEndpoints.Http.html": {
    "href": "api/FastEndpoints.Http.html",
    "title": "Enum Http | FastEndpoints",
    "keywords": "Enum Http enum for specifying a http verb Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public enum Http Fields Name Description DELETE GET POST PUT"
  },
  "api/FastEndpoints.HttpClientExtensions.html": {
    "href": "api/FastEndpoints.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | FastEndpoints",
    "keywords": "Class HttpClientExtensions Inheritance System.Object HttpClientExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public static class HttpClientExtensions Methods GETAsync<TEndpoint, TResponse>(HttpClient) make a GET request to an endpoint using auto route discovery without a request dto and get back a typed response dto. Declaration public static Task<(HttpResponseMessage? response, TResponse result)> GETAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto GETAsync<TEndpoint, TRequest>(HttpClient, TRequest) make a GET request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static async Task<HttpResponseMessage?> GETAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task < System.Nullable < HttpResponseMessage >> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto GETAsync<TRequest, TResponse>(HttpClient, String, TRequest) make a GET request using a request dto and get back a response dto. Declaration public static async Task<(HttpResponseMessage? response, TResponse result)> GETAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request) Parameters Type Name Description HttpClient client System.String requestUri the route url to post to TRequest request the request dto Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TRequest type of the requet dto TResponse type of the response dto GETAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest) make a GET request to an endpoint using auto route discovery using a request dto and get back a response dto. Declaration public static Task<(HttpResponseMessage? response, TResponse result)> GETAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto POSTAsync<TEndpoint, TResponse>(HttpClient) make a POST request to an endpoint using auto route discovery without a request dto and get back a typed response dto. Declaration public static Task<(HttpResponseMessage? response, TResponse result)> POSTAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto POSTAsync<TEndpoint, TRequest>(HttpClient, TRequest) make a POST request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static async Task<HttpResponseMessage?> POSTAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task < System.Nullable < HttpResponseMessage >> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto POSTAsync<TRequest, TResponse>(HttpClient, String, TRequest) make a POST request using a request dto and get back a response dto. Declaration public static async Task<(HttpResponseMessage? response, TResponse result)> POSTAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request) Parameters Type Name Description HttpClient client System.String requestUri the route url to post to TRequest request the request dto Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TRequest type of the requet dto TResponse type of the response dto POSTAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest) make a POST request to an endpoint using auto route discovery using a request dto and get back a response dto. Declaration public static Task<(HttpResponseMessage? response, TResponse result)> POSTAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto PUTAsync<TEndpoint, TResponse>(HttpClient) make a PUT request to an endpoint using auto route discovery without a request dto and get back a typed response dto. Declaration public static Task<(HttpResponseMessage? response, TResponse result)> PUTAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto PUTAsync<TEndpoint, TRequest>(HttpClient, TRequest) make a PUT request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static async Task<HttpResponseMessage?> PUTAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task < System.Nullable < HttpResponseMessage >> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto PUTAsync<TRequest, TResponse>(HttpClient, String, TRequest) make a PUT request using a request dto and get back a response dto. Declaration public static async Task<(HttpResponseMessage? response, TResponse result)> PUTAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request) Parameters Type Name Description HttpClient client System.String requestUri the route url to post to TRequest request the request dto Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TRequest type of the requet dto TResponse type of the response dto PUTAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest) make a PUT request to an endpoint using auto route discovery using a request dto and get back a response dto. Declaration public static Task<(HttpResponseMessage? response, TResponse result)> PUTAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request) where TEndpoint : BaseEndpoint, new() Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task < System.ValueTuple < System.Nullable < HttpResponseMessage >, TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto"
  },
  "api/FastEndpoints.IEndpoint.html": {
    "href": "api/FastEndpoints.IEndpoint.html",
    "title": "Interface IEndpoint | FastEndpoints",
    "keywords": "Interface IEndpoint Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public interface IEndpoint"
  },
  "api/FastEndpoints.IPostProcessor-2.html": {
    "href": "api/FastEndpoints.IPostProcessor-2.html",
    "title": "Interface IPostProcessor<TRequest, TResponse> | FastEndpoints",
    "keywords": "Interface IPostProcessor<TRequest, TResponse> interface for defining post-processors to be executed after the main endpoint handler is done Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public interface IPostProcessor<TRequest, TResponse> Type Parameters Name Description TRequest the type of the request dto TResponse the type of the response dto Methods PostProcessAsync(TRequest, TResponse, HttpContext, IReadOnlyCollection<ValidationFailure>, CancellationToken) Declaration Task PostProcessAsync(TRequest req, TResponse res, HttpContext ctx, IReadOnlyCollection<ValidationFailure> failures, CancellationToken ct) Parameters Type Name Description TRequest req TResponse res Microsoft.AspNetCore.Http.HttpContext ctx IReadOnlyCollection < ValidationFailure > failures CancellationToken ct Returns Type Description Task"
  },
  "api/FastEndpoints.IPreProcessor-1.html": {
    "href": "api/FastEndpoints.IPreProcessor-1.html",
    "title": "Interface IPreProcessor<TRequest> | FastEndpoints",
    "keywords": "Interface IPreProcessor<TRequest> interface for defining pre-processors to be executed before the main endpoint handler is called Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public interface IPreProcessor<TRequest> Type Parameters Name Description TRequest the type of the request dto Methods PreProcessAsync(TRequest, HttpContext, List<ValidationFailure>, CancellationToken) Declaration Task PreProcessAsync(TRequest req, HttpContext ctx, List<ValidationFailure> failures, CancellationToken ct) Parameters Type Name Description TRequest req Microsoft.AspNetCore.Http.HttpContext ctx List < ValidationFailure > failures CancellationToken ct Returns Type Description Task"
  },
  "api/FastEndpoints.IRequest-1.html": {
    "href": "api/FastEndpoints.IRequest-1.html",
    "title": "Interface IRequest<TEntity> | FastEndpoints",
    "keywords": "Interface IRequest<TEntity> use this interface to add functionality to easily map a request dto to a given entity Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public interface IRequest<TEntity> Type Parameters Name Description TEntity the type of the entity to map to Methods ToEntity() the method that maps a request dto to an entity Declaration TEntity ToEntity() Returns Type Description TEntity"
  },
  "api/FastEndpoints.IResponse-1.html": {
    "href": "api/FastEndpoints.IResponse-1.html",
    "title": "Interface IResponse<TEntity> | FastEndpoints",
    "keywords": "Interface IResponse<TEntity> use this interface to populate a response dto from a given entity Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public interface IResponse<TEntity> Type Parameters Name Description TEntity the type of the entity to populate values from Methods FromEntity(TEntity) the method that populates response dto from an entity Declaration void FromEntity(TEntity entity) Parameters Type Name Description TEntity entity the type of the entity to populate from"
  },
  "api/FastEndpoints.MainExtensions.html": {
    "href": "api/FastEndpoints.MainExtensions.html",
    "title": "Class MainExtensions | FastEndpoints",
    "keywords": "Class MainExtensions Inheritance System.Object MainExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public static class MainExtensions Methods AddFastEndpoints(IServiceCollection) adds the FastEndpoints services to the ASP.Net middleware pipeline Declaration public static IServiceCollection AddFastEndpoints(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection UseFastEndpoints(IEndpointRouteBuilder) finalizes auto discovery of endpoints and prepares FastEndpoints to start processing requests Declaration public static IEndpointRouteBuilder UseFastEndpoints(this IEndpointRouteBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder Returns Type Description Microsoft.AspNetCore.Routing.IEndpointRouteBuilder"
  },
  "api/FastEndpoints.Mode.html": {
    "href": "api/FastEndpoints.Mode.html",
    "title": "Enum Mode | FastEndpoints",
    "keywords": "Enum Mode enum for specifying the waiting mode for event notifications Namespace : FastEndpoints Assembly : FastEndpoints.dll Syntax public enum Mode Fields Name Description WaitForAll return a Task that will complete only when all of the subscribers complete their work WaitForAny returns a Task that will complete when any of the subscribers complete their work WaitForNone returns an already completed Task (fire and forget)"
  },
  "api/FastEndpoints.Validation.html": {
    "href": "api/FastEndpoints.Validation.html",
    "title": "Namespace FastEndpoints.Validation | FastEndpoints",
    "keywords": "Namespace FastEndpoints.Validation Classes Validator<TRequest>"
  },
  "api/FastEndpoints.Validation.Validator-1.html": {
    "href": "api/FastEndpoints.Validation.Validator-1.html",
    "title": "Class Validator<TRequest> | FastEndpoints",
    "keywords": "Class Validator<TRequest> Inheritance System.Object Validator<TRequest> Namespace : FastEndpoints.Validation Assembly : FastEndpoints.dll Syntax public abstract class Validator<TRequest> : AbstractValidator<TRequest>, IHasServiceProvider where TRequest : class Type Parameters Name Description TRequest Properties ServiceProvider Declaration public IServiceProvider ServiceProvider { get; set; } Property Value Type Description IServiceProvider Methods Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration protected object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description System.Object Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration protected TService Resolve<TService>() Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration protected object TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description System.Object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration protected TService TryResolve<TService>() Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | FastEndpoints",
    "keywords": "Intro An alternative for building RESTful Web APIs with ASP.Net 6 which encourages CQRS and Vertical Slice Architecture. FastEndpoints offers a more elegant solution than the Minimal APIs and MVC Controllers . Performance is on par with the Minimal APIs and is faster; uses less memory; and outperforms a traditional MVC Controller by about 34k requests per second on a Ryzen 3700X desktop. Features Define your endpoints in multiple class files (even in deeply nested folders) Auto discovery and registration of endpoints Attribute-free endpoint definitions (no attribute argument type restrictions) Secure by default and supports most authentication/authorization providers Built-in support for JWT Bearer auth scheme Supports policy/permission/role/claim based security Declarative security policy building (inside each endpoint) Supports any IOC container (compatible with asp.net) Dependencies are automatically property injected Model binding support from route/json body/claims/forms Model validation using FluentValidation rules Convenient business logic validation and error responses Easy access to environment and configuration settings Supports pipeline behaviors like MediatR Supports in-process pub/sub event notifications Auto discovery of event notification handlers Convenient integration testing (route-less and strongly-typed) Plays well with the asp.net middleware pipeline Supports swagger/serilog/etc. Visual studio extension (vsix) for easy vertical slice feature scaffolding Plus anything else the Minimal APIs can do... Get Started Benchmarks"
  },
  "wiki/Get-Started.html": {
    "href": "wiki/Get-Started.html",
    "title": "Install | FastEndpoints",
    "keywords": "Install install the nuget package with command: Install-Package MongoDB.Entities Initialize first import the package with using MongoDB.Entities; then initialize the database connection like so: Basic initialization await DB.InitAsync(\"DatabaseName\", \"HostAddress\", PortNumber); Advanced initialization await DB.InitAsync(\"DatabaseName\", new MongoClientSettings() { Server = new MongoServerAddress(\"localhost\", 27017), Credential = MongoCredential.CreateCredential(\"DatabaseName\", \"username\", \"password\") }); this will only work for mongodb v4.0 or newer databases as it will use the SCRAM-SHA-256 authentication method. if your db version is older than that and uses SCRAM-SHA-1 authentication method, please click here to see how to connect or you may use a connection string to connect as shown below. Using a connection string await DB.InitAsync(\"DatabaseName\", MongoClientSettings.FromConnectionString( \"mongodb://{username}:{password}@{hostname}:{port}/?authSource=admin\"));"
  }
}