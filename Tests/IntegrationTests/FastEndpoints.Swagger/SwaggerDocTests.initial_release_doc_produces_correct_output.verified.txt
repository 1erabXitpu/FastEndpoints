{
  x-generator: NSwag v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)),
  openapi: 3.0.0,
  info: {
    title: Web API,
    version: v0.0
  },
  paths: {
    /api/uploads/image/save: {
      post: {
        tags: [
          Uploads
        ],
        operationId: PostUploadsImageSaveEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            multipart/form-data: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        }
      },
      put: {
        tags: [
          Uploads
        ],
        operationId: PutUploadsImageSaveEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            multipart/form-data: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/uploads/image/save-typed: {
      post: {
        tags: [
          Uploads
        ],
        operationId: PostUploadsImageSaveTypedEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            multipart/form-data: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              image/png: {
                schema: {
                  type: string
                }
              },
              test/image: {
                schema: {
                  type: string
                }
              }
            }
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          },
          204: {
            description: No Content,
            content: {
              text/plain: {
                schema: {
                  type: string
                }
              },
              test/notcontent: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      },
      put: {
        tags: [
          Uploads
        ],
        operationId: PutUploadsImageSaveTypedEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            multipart/form-data: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              image/png: {
                schema: {
                  type: string
                }
              },
              test/image: {
                schema: {
                  type: string
                }
              }
            }
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          },
          204: {
            description: No Content,
            content: {
              text/plain: {
                schema: {
                  type: string
                }
              },
              test/notcontent: {
                schema: {
                  type: string
                }
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/array-validation-error-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesValidationErrorTestArrayValidationErrorTestEndpoint,
        requestBody: {
          x-name: ArrayRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/dictionary-validation-error-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesValidationErrorTestDictionaryValidationErrorTestEndpoint,
        requestBody: {
          x-name: DictionaryRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/list-in-list-validation-error-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesValidationErrorTestListInListValidationErrorTestEndpoint,
        requestBody: {
          x-name: ListInListRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/list-validation-error-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesValidationErrorTestListValidationErrorTestEndpoint,
        requestBody: {
          x-name: ListRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/object-array-validation-error-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesValidationErrorTestObjectArrayValidationErrorTestEndpoint,
        requestBody: {
          x-name: ObjectArrayRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/unit-test-concurrency: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesUnitTestConcurrencyTestEndpoint,
        parameters: [
          {
            name: Id,
            in: query,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: integer,
                  format: int32
                }
              }
            }
          }
        }
      }
    },
    /api/multi-test: {
      post: {
        tags: [
          Multi-Test
        ],
        operationId: TestCasesTypedResultTestMultiResultEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          404: {
            description: Not Found
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/testcases/stj-infinite-recursion: {
      get: {
        tags: [
          Testcases
        ],
        operationId: TestCasesSTJInfiniteRecursionTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/service-reg-gen-test: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesServiceRegistrationGeneratorTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: array,
                  items: {
                    type: string
                  }
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/route-binding-test/{string}/{bool}/{int}/{long}/{double}/{decimal}: {
      post: {
        tags: [
          Test-Cases
        ],
        summary: summary,
        description: descr,
        operationId: RouteBindingTest,
        parameters: [
          {
            name: string,
            in: path,
            required: true,
            description: this is a string prop xml comment,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: bool,
            in: path,
            required: true,
            schema: {
              type: boolean
            }
          },
          {
            name: int,
            in: path,
            required: true,
            schema: {
              type: integer,
              format: int32,
              nullable: true
            }
          },
          {
            name: long,
            in: path,
            required: true,
            schema: {
              type: integer,
              format: int64
            }
          },
          {
            name: double,
            in: path,
            required: true,
            schema: {
              type: number,
              format: double
            }
          },
          {
            name: decimal,
            in: path,
            required: true,
            schema: {
              type: number,
              format: decimal
            }
          },
          {
            name: Person,
            in: query,
            required: true,
            schema: {
              nullable: true,
              oneOf: [
                null
              ]
            },
            example: {
              Id: Id,
              Name: Name,
              Age: 0,
              Child: {
                Id: Id,
                Name: Name,
                Age: 0,
                Strings: [
                  
                ]
              },
              Numbers: [
                0
              ]
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            },
            test1/test1: {
              schema: null
            },
            test2/test2: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/ep-witout-req-route-binding-test/{CustomerID}/{OtherID}: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesRouteBindingInEpWithoutReqEpWithoutReqRouteBindingTest,
        parameters: [
          {
            name: CustomerID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: OtherID,
            in: path,
            required: true,
            description: the description for other id,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/tokens/login: {
      get: {
        tags: [
          Tokens
        ],
        operationId: TestCasesRefreshTokensTestLoginEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/tokens/refresh-token: {
      post: {
        tags: [
          Tokens
        ],
        operationId: TestCasesRefreshTokensTestTokenService,
        requestBody: {
          x-name: TokenRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/global-throttle-error-response: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesRateLimitTestsGlobalErrorResponseTest,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/range: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesRangeHandlingTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          206: {
            description: ,
            content: {
              text/plain: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/ep-witout-req-query-param-binding-test: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesQueryParamBindingInEpWithoutReqEpWithoutReqQueryParamBindingTest,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/query-arrays-of-objects-binding-test: {
      get: {
        tags: [
          Test-Cases
        ],
        summary: summary,
        description: descr,
        operationId: QueryArraysOfObjectsBindingTest,
        parameters: [
          {
            name: Person,
            in: query,
            required: true,
            schema: {
              nullable: true,
              oneOf: [
                null
              ]
            },
            example: {
              Child: {
                Objects: [
                  {
                    String: String,
                    Bool: false,
                    Int: 0,
                    Long: 0,
                    Double: 0.0,
                    Enum: 0
                  }
                ]
              },
              Objects: [
                {
                  String: String,
                  Bool: false,
                  Int: 0,
                  Long: 0,
                  Double: 0.0,
                  Enum: 0
                }
              ],
              ArraysOfObjects: [
                [
                  {
                    String: String,
                    Bool: false,
                    Int: 0,
                    Long: 0,
                    Double: 0.0,
                    Enum: 0
                  }
                ]
              ]
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/query-object-binding-test: {
      get: {
        tags: [
          Test-Cases
        ],
        summary: summary,
        description: descr,
        operationId: QueryObjectBindingTest,
        parameters: [
          {
            name: String,
            in: query,
            required: true,
            description: this is a string prop xml comment,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: Bool,
            in: query,
            required: true,
            schema: {
              type: boolean
            }
          },
          {
            name: Int,
            in: query,
            schema: {
              type: integer,
              format: int32,
              nullable: true
            }
          },
          {
            name: Long,
            in: query,
            required: true,
            schema: {
              type: integer,
              format: int64
            }
          },
          {
            name: Double,
            in: query,
            required: true,
            schema: {
              type: number,
              format: double
            }
          },
          {
            name: Enum,
            in: query,
            required: true,
            schema: null
          },
          {
            name: Person,
            in: query,
            required: true,
            schema: {
              nullable: true,
              oneOf: [
                null
              ]
            },
            example: {
              Id: Id,
              Name: Name,
              Age: 0,
              Child: {
                Id: Id,
                Name: Name,
                Age: 0,
                Strings: [
                  
                ],
                FavoriteDays: [
                  0
                ],
                IsHidden: false
              },
              Numbers: [
                0
              ],
              FavoriteDay: 0,
              ByteEnum: 0,
              IsHidden: false
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/processor-state-sharing: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesProcessorStateTestEndpoint,
        parameters: [
          {
            name: Id,
            in: query,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/pre-processor-is-run-on-validation-failure: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesPreProcessorIsRunOnValidationFailureEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/testcases/pre-processor-shortcircuit-while-validator-fails: {
      get: {
        tags: [
          Testcases
        ],
        operationId: TestCasesPrecessorShortWhileValidatorFailsEndpoint,
        parameters: [
          {
            name: Id,
            in: query,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/testcases/post-processor-handles-exception: {
      get: {
        tags: [
          Testcases
        ],
        operationId: TestCasesPostProcessorTestEndpoint,
        parameters: [
          {
            name: Id,
            in: query,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/testcases/post-processor-handles-exception/no-post-processor: {
      get: {
        tags: [
          Testcases
        ],
        operationId: TestCasesPostProcessorTestEpNoPostProcessor,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          }
        }
      }
    },
    /test-cases/plaintext/{Id}: {
      post: {
        tags: [
          Test-Cases
        ],
        summary: plain request endpoint summary,
        operationId: TestCasesPlainTextRequestTestEndpoint,
        parameters: [
          {
            name: Id,
            in: path,
            required: true,
            description: overriden id text,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            text/plain: {
              schema: null
            },
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {
                schema: null
              },
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/on-before-on-after-validate: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesOnBeforeAfterValidationTestEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/missing-header-test/dont-throw: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesMissingHeaderTestDontThrowIfMissingEndpoint,
        parameters: [
          {
            name: TenantID,
            in: header,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        requestBody: {
          x-name: DontThrowIfMissingRequest,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/missing-header-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesMissingHeaderTestThrowIfMissingEndpoint,
        parameters: [
          {
            name: TenantID,
            in: header,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/missing-claim-test/dont-throw: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesMissingClaimTestDontThrowIfMissingEndpoint,
        parameters: [
          {
            name: TestProp,
            in: query,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/missing-claim-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesMissingClaimTestThrowIfMissingEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/mapper-test: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesMapperTestEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/json-array-binding-to-list-of-models: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesJsonArrayBindingToListOfModelsEndpoint,
        requestBody: {
          x-name: List`1,
          description: ,
          content: {
            application/json: {
              schema: {
                type: array,
                items: null
              }
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: array,
                  items: null
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/json-array-binding-to-ienumerable-dto: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesJsonArrayBindingToIEnumerableDtoEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: array,
                  items: null
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/json-array-binding-for-ienumerable-props: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesJsonArrayBindingForIEnumerablePropsEndpoint,
        parameters: [
          {
            name: Doubles,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: number,
                format: double
              }
            },
            example: [
              0.0
            ]
          },
          {
            name: Ints,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: integer,
                format: int32
              }
            },
            example: [
              0
            ]
          },
          {
            name: Guids,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string,
                format: guid
              }
            },
            example: [
              
            ]
          },
          {
            name: Dates,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string,
                format: date-time
              }
            },
            example: ["2020-10-10"]
          },
          {
            name: Steven,
            in: query,
            required: true,
            schema: {
              nullable: true,
              oneOf: [
                null
              ]
            },
            example: {
              Age: 0,
              Name: Name
            }
          },
          {
            name: Dict,
            in: query,
            required: true,
            schema: {
              type: object,
              nullable: true,
              additionalProperties: {
                type: string
              }
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/tests/iauth-injection: {
      get: {
        tags: [
          Tests
        ],
        operationId: TestCasesIAuthorizationServiceInjectionTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: boolean
                }
              }
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /mobile/api/test-cases/global-prefix-override/{Id}: {
      post: {
        tags: [
          Mobile
        ],
        summary: plain request endpoint summary,
        operationId: TestCasesGlobalRoutePrefixOverrideTestEndpoint,
        parameters: [
          {
            name: Id,
            in: path,
            required: true,
            description: overriden id text,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            text/plain: {
              schema: null
            },
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {
                schema: null
              },
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/from-body-binding/{id}: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesFromBodyJsonBindingEndpoint,
        parameters: [
          {
            name: id,
            in: path,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          },
          {
            name: CustomerID,
            in: header,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        requestBody: {
          x-name: Product,
          content: {
            application/json: {
              schema: {
                nullable: true,
                oneOf: [
                  null
                ]
              },
              example: {
                Id: 0,
                Name: Name,
                Price: 200.1
              }
            }
          },
          required: true
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/form-file-collection-binding: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesFormFileBindingTestEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            multipart/form-data: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/test-cases/event-bus-test: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesEventBusTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: integer,
                  format: int32
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/empty-request-test: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesEmptyRequestTestEmptyRequestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {
                schema: null
              },
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {
            JWTBearerAuth: [
              admin
            ]
          }
        ]
      }
    },
    /api/test-cases/dupe-param-binding-for-ienumerable-props: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesDupeParamBindingForIEnumerablePropsEndpoint,
        parameters: [
          {
            name: Strings,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          },
          {
            name: MoreStrings,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          },
          {
            name: Doubles,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: number,
                format: double
              }
            },
            example: [
              0.0
            ]
          },
          {
            name: Ints,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: integer,
                format: int32
              }
            },
            example: [
              0
            ]
          },
          {
            name: Guids,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string,
                format: guid
              }
            },
            example: [
              
            ]
          },
          {
            name: Dates,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string,
                format: date-time
              }
            },
            example: ["2020-10-10"]
          },
          {
            name: Persons,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: null
            },
            example: [
              {
                Name: Name,
                Age: 0
              }
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/{number}: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesDontCatchExceptionsEndpoint,
        parameters: [
          {
            name: number,
            in: path,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          }
        }
      }
    },
    /api/test-cases/data-annotation: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesDataAnnotationCompliantEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        deprecated: true
      }
    },
    /api/test-cases/custom-request-binder: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesCustomRequestBinderEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/tests/command-handler: {
      get: {
        tags: [
          Tests
        ],
        operationId: TestCasesCommandHandlerTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    },
    /api/tests/commands: {
      get: {
        tags: [
          Tests
        ],
        operationId: TestCasesCommandBusTestEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    },
    /api/test-cases/byte-array-query-param-binding-test: {
      get: {
        tags: [
          Test-Cases
        ],
        summary: summary,
        description: descr,
        operationId: ByteArrayQueryParamBindingTest,
        parameters: [
          {
            name: Timestamp,
            in: query,
            required: true,
            schema: {
              type: string,
              format: byte,
              nullable: true
            }
          },
          {
            name: ObjectWithByteArrays,
            in: query,
            required: true,
            schema: {
              nullable: true,
              oneOf: [
                null
              ]
            },
            example: {
              Timestamp: Timestamp,
              Timestamps: [
                
              ]
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/antiforgery/token: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesAntiforgeryTestGetAfTokenEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/test-cases/antiforgery/render-form: {
      get: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesAntiforgeryTestRenderFormHtml,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          }
        }
      }
    },
    /api/test-cases/antiforgery/validate: {
      post: {
        tags: [
          Test-Cases
        ],
        operationId: TestCasesAntiforgeryTestVerifyAfToken,
        requestBody: {
          x-name: VerificationRequest,
          description: ,
          content: {
            multipart/form-data: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    },
    /api/sales/orders/retrieve/{OrderID}: {
      get: {
        tags: [
          Sales
        ],
        operationId: SalesOrdersRetrieveEndpoint,
        parameters: [
          {
            name: OrderID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: tenant-id,
            in: header,
            description: this is the tenant id,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        }
      }
    },
    /api/sales/orders/create/{guidTest}: {
      post: {
        tags: [
          Sales
        ],
        operationId: SalesOrdersCreateEndpoint1,
        parameters: [
          {
            name: guidTest,
            in: path,
            required: true,
            description: this is a guid property description,
            schema: {
              type: string,
              format: guid
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/sales/orders/create: {
      post: {
        tags: [
          Sales
        ],
        operationId: SalesOrdersCreateEndpoint2,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/inventory/manage/update: {
      put: {
        tags: [
          Inventory
        ],
        operationId: InventoryManageUpdateEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          },
          400: {
            description: Bad Request,
            content: {
              application/problem+json: {
                schema: null
              }
            }
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/inventory/manage/delete/{itemID}: {
      delete: {
        tags: [
          Inventory
        ],
        operationId: InventoryManageDeleteEndpoint,
        parameters: [
          {
            name: itemID,
            in: path,
            required: true,
            schema: {
              type: string,
              default: test default val,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          403: {
            description: Forbidden
          }
        }
      }
    },
    /api/inventory/manage/create: {
      post: {
        tags: [
          test,
          Inventory
        ],
        operationId: CreateInventoryItem,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null,
              examples: {
                Example 1: {
                  value: {
                    Id: 1,
                    Name: first name,
                    Description: first description,
                    Price: 10.0,
                    QtyOnHand: 10,
                    ModifiedBy: null,
                    GenerateFullUrl: false
                  }
                },
                Example 2: {
                  value: {
                    Id: 200,
                    Name: second  name,
                    Description: description two,
                    Price: 209.0,
                    QtyOnHand: 290,
                    ModifiedBy: null,
                    GenerateFullUrl: false
                  }
                }
              }
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          201: {
            description: Created
          },
          500: {
            description: Server Error
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/inventory/list/recent/{CategoryID}: {
      get: {
        tags: [
          Inventory
        ],
        operationId: InventoryListRecentEndpoint,
        parameters: [
          {
            name: CategoryID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        }
      }
    },
    /api/inventory/get-product/{ProductID}: {
      get: {
        tags: [
          Inventory
        ],
        operationId: InventoryGetProductEndpoint,
        parameters: [
          {
            name: ProductID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          403: {
            description: Forbidden
          }
        }
      }
    },
    /api/customer/update: {
      put: {
        tags: [
          Customer
        ],
        operationId: CustomersUpdateEndpoint1,
        parameters: [
          {
            name: CustomerID,
            in: query,
            required: true,
            schema: {
              type: string,
              default: test default val,
              nullable: true
            }
          },
          {
            name: Name,
            in: query,
            required: true,
            schema: {
              type: string,
              default: query test default val,
              nullable: true
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/save: {
      put: {
        tags: [
          Customer
        ],
        operationId: CustomersUpdateEndpoint2,
        parameters: [
          {
            name: CustomerID,
            in: query,
            required: true,
            schema: {
              type: string,
              default: test default val,
              nullable: true
            }
          },
          {
            name: Name,
            in: query,
            required: true,
            schema: {
              type: string,
              default: query test default val,
              nullable: true
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      post: {
        tags: [
          Customer Save
        ],
        operationId: PostCustomersCreateEndpoint3,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      get: {
        tags: [
          Customer Save
        ],
        operationId: GetCustomersCreateEndpoint3,
        parameters: [
          {
            name: cID,
            in: query,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: CustomerName,
            in: query,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: PhoneNumbers,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/update-with-header: {
      put: {
        tags: [
          Customer
        ],
        operationId: CustomersUpdateWithHeaderEndpoint,
        parameters: [
          {
            name: CustomerID,
            in: header,
            required: true,
            schema: {
              type: integer,
              format: int32
            }
          },
          {
            name: tenant-id,
            in: header,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/login: {
      get: {
        tags: [
          Customer
        ],
        operationId: CustomersLoginEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          }
        }
      }
    },
    /api/customer/list/recent: {
      get: {
        tags: [
          Customer
        ],
        operationId: CustomersListRecentEndpoint,
        responses: {
          200: {
            description: Success,
            content: {
              application/json: {
                schema: null
              }
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {
            JWTBearerAuth: [
              admin,
              staff
            ]
          }
        ]
      }
    },
    /api/customer/new/{RefererID}: {
      post: {
        tags: [
          Customer Save
        ],
        operationId: PostCustomersCreateEndpoint1,
        parameters: [
          {
            name: RefererID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            */*: {
              schema: null
            },
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      get: {
        tags: [
          Customer Save
        ],
        operationId: GetCustomersCreateEndpoint1,
        parameters: [
          {
            name: RefererID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: cID,
            in: query,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: CustomerName,
            in: query,
            description: the name of the cutomer goes here,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: PhoneNumbers,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/{cID}/new/{SourceID}: {
      post: {
        tags: [
          Customer Save
        ],
        operationId: PostCustomersCreateEndpoint2,
        parameters: [
          {
            name: cID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: SourceID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      get: {
        tags: [
          Customer Save
        ],
        operationId: GetCustomersCreateEndpoint2,
        parameters: [
          {
            name: cID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: SourceID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: CustomerName,
            in: query,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: PhoneNumbers,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/new/2{RefererID}: {
      post: {
        tags: [
          Customer Save
        ],
        operationId: PostCustomersCreateWithPropertiesDIEndpoint1,
        parameters: [
          {
            name: RefererID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            */*: {
              schema: null
            },
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      get: {
        tags: [
          Customer Save
        ],
        operationId: GetCustomersCreateWithPropertiesDIEndpoint1,
        parameters: [
          {
            name: RefererID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: cID,
            in: query,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: CustomerName,
            in: query,
            description: the name of the cutomer goes here,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: PhoneNumbers,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/{cID}/new2/{SourceID}: {
      post: {
        tags: [
          Customer Save
        ],
        operationId: PostCustomersCreateWithPropertiesDIEndpoint2,
        parameters: [
          {
            name: cID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: SourceID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      get: {
        tags: [
          Customer Save
        ],
        operationId: GetCustomersCreateWithPropertiesDIEndpoint2,
        parameters: [
          {
            name: cID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: SourceID,
            in: path,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: CustomerName,
            in: query,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: PhoneNumbers,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/customer/save2: {
      post: {
        tags: [
          Customer Save
        ],
        operationId: PostCustomersCreateWithPropertiesDIEndpoint3,
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      },
      get: {
        tags: [
          Customer Save
        ],
        operationId: GetCustomersCreateWithPropertiesDIEndpoint3,
        parameters: [
          {
            name: cID,
            in: query,
            required: true,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: CustomerName,
            in: query,
            schema: {
              type: string,
              nullable: true
            }
          },
          {
            name: PhoneNumbers,
            in: query,
            style: form,
            explode: true,
            required: true,
            schema: {
              type: array,
              nullable: true,
              items: {
                type: string
              }
            },
            example: [
              
            ]
          }
        ],
        responses: {
          200: {
            description: Success,
            content: {
              text/plain: {},
              application/json: {}
            }
          },
          401: {
            description: Unauthorized
          },
          403: {
            description: Forbidden
          }
        },
        security: [
          {}
        ]
      }
    },
    /api/admin/login: {
      post: {
        tags: [
          Admin
        ],
        summary: this is a short summary,
        description: this is the long description of the endpoint,
        operationId: PostAdminLoginEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: all good,
            headers: {},
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: indicates an error
          },
          403: {
            description: forbidden when login fails
          }
        }
      },
      put: {
        tags: [
          Admin
        ],
        summary: this is a short summary,
        description: this is the long description of the endpoint,
        operationId: PutAdminLoginEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: all good,
            headers: {},
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: indicates an error
          },
          403: {
            description: forbidden when login fails
          }
        }
      },
      patch: {
        tags: [
          Admin
        ],
        summary: this is a short summary,
        description: this is the long description of the endpoint,
        operationId: PatchAdminLoginEndpoint,
        requestBody: {
          x-name: Request,
          description: ,
          content: {
            application/json: {
              schema: null
            }
          },
          required: true,
          x-position: 1
        },
        responses: {
          200: {
            description: all good,
            headers: {},
            content: {
              application/json: {
                schema: null
              }
            }
          },
          400: {
            description: indicates an error
          },
          403: {
            description: forbidden when login fails
          }
        }
      }
    },
    /test: {
      get: {
        tags: [
          map-get
        ],
        operationId: GetTest,
        responses: {
          200: {
            description: ,
            content: {
              application/json: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    },
    /test/{testId}: {
      get: {
        tags: [
          map-get
        ],
        operationId: GetTest2,
        parameters: [
          {
            name: testId,
            in: path,
            required: true,
            schema: {
              type: integer,
              format: int32,
              nullable: true
            },
            x-position: 1
          }
        ],
        responses: {
          200: {
            description: ,
            content: {
              application/json: {
                schema: {
                  type: string
                }
              }
            }
          }
        }
      }
    }
  },
  components: {
    schemas: {
      FastEndpointsErrorResponse: {
        type: object,
        description: the dto used to send an error response to the client,
        additionalProperties: false,
        properties: {
          StatusCode: {
            type: integer,
            description: the http status code sent to the client. default is 400.,
            format: int32,
            default: 400
          },
          Message: {
            type: string,
            description: the message for the error response,
            default: One or more errors occurred!
          },
          Errors: {
            type: object,
            description: the collection of errors for the current context,
            additionalProperties: {
              type: array,
              items: {
                type: string
              }
            }
          }
        }
      },
      UploadsImageSaveRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          ID: {
            type: string
          },
          Width: {
            type: integer,
            format: int32,
            maximum: 2000.0,
            minimum: 10.0,
            exclusiveMaximum: true,
            exclusiveMinimum: true
          },
          Height: {
            type: integer,
            format: int32,
            maximum: 2000.0,
            minimum: 10.0,
            exclusiveMaximum: true,
            exclusiveMinimum: true
          }
        }
      },
      UploadsImageSaveTypedRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          ID: {
            type: string
          },
          Width: {
            type: integer,
            format: int32,
            maximum: 2000.0,
            minimum: 10.0,
            exclusiveMaximum: true,
            exclusiveMinimum: true
          },
          Height: {
            type: integer,
            format: int32,
            maximum: 2000.0,
            minimum: 10.0,
            exclusiveMaximum: true,
            exclusiveMinimum: true
          },
          File1: {
            type: string,
            format: binary
          },
          File2: {
            type: string,
            format: binary
          },
          Cars: {
            type: array,
            items: {
              type: string,
              format: binary
            }
          },
          Jets: {
            type: array
          }
        }
      },
      TestCasesValidationErrorTestArrayRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          StringArray: {
            type: array,
            items: {
              type: string
            }
          }
        }
      },
      TestCasesValidationErrorTestDictionaryRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          StringDictionary: {
            type: object,
            additionalProperties: {
              type: string
            }
          }
        }
      },
      TestCasesValidationErrorTestListInListRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          NumbersList: {
            type: array,
            items: {
              type: array,
              items: {
                type: integer,
                format: int32
              }
            }
          }
        }
      },
      TestCasesValidationErrorTestListRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          NumbersList: {
            type: array,
            items: {
              type: integer,
              format: int32
            }
          }
        }
      },
      TestCasesValidationErrorTestObjectArrayRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          ObjectArray: {
            type: array,
            items: null
          }
        }
      },
      TestCasesValidationErrorTestTObject: {
        type: object,
        additionalProperties: false,
        properties: {
          Test: {
            type: string
          }
        }
      },
      TestCasesUnitTestConcurrencyTestRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesTypedResultTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          RequestId: {
            type: integer,
            format: int32
          }
        }
      },
      FastEndpointsProblemDetails: {
        type: object,
        description:
RFC7807 compatible problem details/ error response class. this can be used by configuring startup like so:

    app.UseFastEndpoints(x => x.Errors.ResponseBuilder = ProblemDetails.ResponseBuilder);,
        additionalProperties: false,
        properties: {
          Type: {
            type: string,
            default: https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1
          },
          Title: {
            type: string,
            default: One or more validation errors occurred.
          },
          Status: {
            type: integer,
            format: int32,
            default: 400
          },
          Instance: {
            type: string,
            default: /api/route
          },
          TraceId: {
            type: string,
            default: 0HMPNHL0JHL76:00000001
          },
          Errors: {
            type: array,
            items: null
          }
        }
      },
      FastEndpointsProblemDetails_Error: {
        type: object,
        description: the error details object,
        additionalProperties: false,
        properties: {
          Name: {
            type: string,
            description: the name of the error or property of the dto that caused the error,
            default: Error or field name
          },
          Reason: {
            type: string,
            description: the reason for the error,
            default: Error reason
          },
          Code: {
            type: string,
            description: the code of the error,
            nullable: true
          },
          Severity: {
            type: string,
            description: the severity of the error,
            nullable: true
          }
        }
      },
      TestCasesTypedResultTestRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            format: int32
          }
        }
      },
      TestCasesSTJInfiniteRecursionTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            format: int32
          },
          Res: {
            nullable: true,
            oneOf: [
              null
            ]
          }
        }
      },
      TestCasesRouteBindingTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          String: {
            type: string
          },
          Bool: {
            type: boolean
          },
          Int: {
            type: integer,
            format: int32
          },
          Long: {
            type: integer,
            format: int64
          },
          Double: {
            type: number,
            format: double
          },
          Decimal: {
            type: number,
            format: decimal
          },
          Blank: {
            type: integer,
            format: int32,
            nullable: true
          },
          FromBody: {
            type: string
          },
          Url: {
            type: string,
            nullable: true
          },
          Custom: null,
          CustomList: null,
          Person: null
        }
      },
      TestCasesRouteBindingTestCustom: {
        type: object,
        additionalProperties: false,
        properties: {
          Value: {
            type: integer,
            format: int32
          }
        }
      },
      TestCasesRouteBindingTestCustomList: {
        type: array,
        items: {
          type: integer,
          format: int32
        }
      },
      TestCasesRouteBindingTestPerson: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: string,
            format: guid
          },
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          },
          Child: null,
          Numbers: {
            type: array,
            items: {
              type: integer,
              format: int32
            }
          }
        }
      },
      TestCasesRouteBindingTestNestedPerson: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: string,
            format: guid
          },
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          },
          Strings: {
            type: array,
            items: {
              type: string
            }
          }
        }
      },
      TestCasesRouteBindingTestRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Url: {
            type: string,
            format: uri,
            nullable: true
          },
          Custom: null,
          CustomList: null,
          Blank: {
            type: integer,
            format: int32,
            nullable: true
          },
          FromBody: {
            type: string,
            description: overriden from body comment
          }
        }
      },
      TestCasesRouteBindingInEpWithoutReqResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          CustomerID: {
            type: integer,
            format: int32
          },
          OtherID: {
            type: integer,
            description: optional other id,
            format: int32,
            nullable: true
          }
        }
      },
      FastEndpointsSecurityTokenResponse: {
        allOf: [
          null,
          {
            type: object,
            description: base dto for access/refresh token responses,
            additionalProperties: false,
            properties: {
              AccessToken: {
                type: string,
                description: the jwt access token which will be valid for the duration specified by AccessExpiry
              }
            }
          }
        ]
      },
      FastEndpointsSecurityTokenRequest: {
        type: object,
        description: base dto for access/refresh token renewal requests,
        additionalProperties: false,
        properties: {
          UserId: {
            type: string,
            description: unique identifier of a user
          },
          RefreshToken: {
            type: string,
            description: a single-use refresh token which will be valid for the duration specified by RefreshExpiry
          }
        }
      },
      TestCasesRateLimitTestsResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          CustomerID: {
            type: integer,
            format: int32
          },
          OtherID: {
            type: integer,
            description: optional other id,
            format: int32,
            nullable: true
          }
        }
      },
      TestCasesQueryParamBindingInEpWithoutReqResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          CustomerID: {
            type: integer,
            format: int32
          },
          OtherID: {
            type: integer,
            description: optional other id,
            format: int32,
            nullable: true
          },
          Doubles: {
            type: array,
            items: {
              type: number,
              format: double
            }
          },
          Ints: {
            type: array,
            items: {
              type: integer,
              format: int32
            }
          },
          Guids: {
            type: array,
            items: {
              type: string,
              format: guid
            }
          },
          Floaty: {
            type: number,
            format: float
          }
        }
      },
      TestCasesQueryObjectWithObjectsArrayBindingTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Person: null
        }
      },
      TestCasesQueryObjectWithObjectsArrayBindingTestPerson: {
        type: object,
        additionalProperties: false,
        properties: {
          Child: null,
          Objects: {
            type: array,
            items: null
          },
          ArraysOfObjects: {
            type: array,
            items: {
              type: array,
              items: null
            }
          }
        }
      },
      TestCasesQueryObjectWithObjectsArrayBindingTestNestedPerson: {
        type: object,
        additionalProperties: false,
        properties: {
          Objects: {
            type: array,
            items: null
          }
        }
      },
      TestCasesQueryObjectWithObjectsArrayBindingTestObjectInArray: {
        type: object,
        additionalProperties: false,
        properties: {
          String: {
            type: string
          },
          Bool: {
            type: boolean
          },
          Int: {
            type: integer,
            format: int32,
            nullable: true
          },
          Long: {
            type: integer,
            format: int64
          },
          Double: {
            type: number,
            format: double
          },
          Enum: null
        }
      },
      SystemDayOfWeek: {
        type: integer,
        description: ,
        x-enumNames: [
          Sunday,
          Monday,
          Tuesday,
          Wednesday,
          Thursday,
          Friday,
          Saturday
        ],
        enum: [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      TestCasesQueryObjectWithObjectsArrayBindingTestRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesQueryObjectBindingTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          String: {
            type: string,
            description: Some string property
          },
          Bool: {
            type: boolean,
            description: Some bool property
          },
          Int: {
            type: integer,
            format: int32,
            nullable: true
          },
          Long: {
            type: integer,
            format: int64
          },
          Double: {
            type: number,
            format: double
          },
          Enum: null,
          Person: null
        }
      },
      TestCasesQueryObjectBindingTestPerson: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: string,
            format: guid
          },
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          },
          Child: null,
          Numbers: {
            type: array,
            items: {
              type: integer,
              format: int32
            }
          },
          FavoriteDay: null,
          ByteEnum: null,
          IsHidden: {
            type: boolean
          }
        }
      },
      TestCasesQueryObjectBindingTestNestedPerson: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: string,
            format: guid
          },
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          },
          Strings: {
            type: array,
            items: {
              type: string
            }
          },
          FavoriteDays: {
            type: array,
            items: null
          },
          IsHidden: {
            type: boolean
          }
        }
      },
      TestCasesQueryObjectBindingTestByteEnum: {
        type: integer,
        description: ,
        x-enumNames: [
          Check,
          Test,
          AnotherCheck
        ],
        enum: [
          0,
          1,
          2
        ]
      },
      TestCasesQueryObjectBindingTestRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesProcessorStateTestRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesPreProcessorIsRunOnValidationFailureResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Message: {
            type: string
          }
        }
      },
      TestCasesPreProcessorIsRunOnValidationFailureRequest: {
        type: object,
        additionalProperties: false,
        required: [
          FirstName
        ],
        properties: {
          FirstName: {
            type: string,
            minLength: 1,
            nullable: false
          },
          FailureCount: {
            type: integer,
            format: int32
          }
        }
      },
      TestCasesPrecessorShortWhileValidatorFailsRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesPostProcessorTestExceptionDetailsResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Type: {
            type: string
          }
        }
      },
      TestCasesPostProcessorTestRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesPlainTextRequestTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            format: int32
          },
          BodyContent: {
            type: string
          }
        }
      },
      TestCasesPlainTextRequestTestRequest: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      FastEndpointsPlainTextRequest: {
        type: object,
        description: use this dto if you need to model bind the raw content body of an incoming http request or you may implement the IPlainTextRequest interface on your own request dto.,
        additionalProperties: false,
        properties: {
          Content: {
            type: string,
            description: overriden content text
          }
        }
      },
      TestCasesOnBeforeAfterValidationTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Host: {
            type: string,
            nullable: true
          }
        }
      },
      TestCasesOnBeforeAfterValidationTestRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Verb: null,
          Host: {
            type: string,
            nullable: true
          }
        }
      },
      FastEndpointsHttp: {
        type: integer,
        description: enum for specifying a http verb,
        x-enumNames: [
          GET,
          POST,
          PUT,
          PATCH,
          DELETE,
          HEAD
        ],
        enum: [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      TestCasesMissingHeaderTestDontThrowIfMissingRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          TenantID: {
            type: string,
            nullable: true
          }
        }
      },
      TestCasesMissingHeaderTestThrowIfMissingRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesMissingClaimTestDontThrowIfMissingRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesMissingClaimTestThrowIfMissingRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesMapperTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          }
        }
      },
      TestCasesMapperTestRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          FirstName: {
            type: string
          },
          LastName: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          }
        }
      },
      TestCasesJsonArrayBindingToListOfModelsResponse: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false,
            properties: {
              Id: {
                type: integer,
                format: int32
              }
            }
          }
        ]
      },
      TestCasesJsonArrayBindingToListOfModelsRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Name: {
            type: string
          }
        }
      },
      TestCasesJsonArrayBindingToIEnumerableDtoResponse: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      TestCasesJsonArrayBindingToIEnumerableDtoItem: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            format: int32
          },
          Name: {
            type: string
          }
        }
      },
      TestCasesJsonArrayBindingToIEnumerableDtoRequest: {
        type: array,
        items: null
      },
      TestCasesJsonArrayBindingForIEnumerablePropsResponse: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      TestCasesJsonArrayBindingForIEnumerablePropsRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesJsonArrayBindingForIEnumerablePropsRequest_Person: {
        type: object,
        additionalProperties: false,
        properties: {
          Age: {
            type: integer,
            format: int32
          },
          Name: {
            type: string
          }
        }
      },
      TestCasesGlobalRoutePrefixOverrideTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            format: int32
          },
          BodyContent: {
            type: string
          }
        }
      },
      TestCasesGlobalRoutePrefixOverrideTestRequest: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      TestCasesFromBodyJsonBindingResponse: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      TestCasesFromBodyJsonBindingRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Product: null
        }
      },
      TestCasesFromBodyJsonBindingProduct: {
        type: object,
        example: {
          Name: test product name,
          Price: 200.22
        },
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            description: product id goes here,
            format: int32
          },
          Name: {
            type: string,
            description: this is the name of the product
          },
          Price: {
            type: number,
            description: product price goes here,
            format: decimal,
            minimum: 200.0,
            exclusiveMinimum: true
          }
        }
      },
      TestCasesFormFileBindingTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          File1Name: {
            type: string
          },
          File2Name: {
            type: string
          },
          CarNames: {
            type: array,
            items: {
              type: string
            }
          },
          JetNames: {
            type: array,
            items: {
              type: string
            }
          }
        }
      },
      TestCasesFormFileBindingTestRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          ID: {
            type: string
          },
          Width: {
            type: integer,
            format: int32
          },
          Height: {
            type: integer,
            format: int32
          },
          File1: {
            type: string,
            format: binary
          },
          File2: {
            type: string,
            format: binary
          },
          Cars: {
            type: array,
            items: {
              type: string,
              format: binary
            }
          },
          Jets: {
            type: array
          }
        }
      },
      FastEndpointsEmptyResponse: {
        type: object,
        description: a response dto that doesn't have any properties,
        additionalProperties: false
      },
      TestCasesDupeParamBindingForIEnumerablePropsResponse: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      TestCasesDupeParamBindingForIEnumerablePropsRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesDupeParamBindingForIEnumerablePropsRequest_Person: {
        type: object,
        additionalProperties: false,
        properties: {
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          }
        }
      },
      TestCasesDontCatchExceptionsRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesDataAnnotationCompliantRequest: {
        type: object,
        additionalProperties: false,
        required: [
          Name
        ],
        properties: {
          Id: {
            type: integer,
            description: CurrentId,
            format: int32,
            maximum: 99.0,
            minimum: 10.0
          },
          Name: {
            type: string,
            maxLength: 10,
            minLength: 2
          }
        }
      },
      TestCasesCustomRequestBinderResponse: {
        allOf: [
          null,
          {
            type: object,
            additionalProperties: false
          }
        ]
      },
      TestCasesCustomRequestBinderRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: string
          },
          Product: {
            nullable: true,
            oneOf: [
              null
            ]
          },
          CustomerID: {
            type: string
          }
        }
      },
      TestCasesCustomRequestBinderProduct: {
        type: object,
        additionalProperties: false,
        properties: {
          Id: {
            type: integer,
            format: int32
          },
          Name: {
            type: string
          },
          Price: {
            type: number,
            format: decimal
          }
        }
      },
      TestCasesByteArrayQueryParamBindingTestResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Timestamp: {
            type: string,
            format: byte
          },
          ObjectWithByteArrays: null
        }
      },
      TestCasesByteArrayQueryParamBindingTestObjectWithByteArrays: {
        type: object,
        additionalProperties: false,
        properties: {
          Timestamp: {
            type: string,
            format: byte
          },
          Timestamps: {
            type: array,
            items: {
              type: string,
              format: byte
            }
          }
        }
      },
      TestCasesByteArrayQueryParamBindingTestRequest: {
        type: object,
        additionalProperties: false
      },
      TestCasesAntiforgeryTestTokenResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          TokenName: {
            type: string
          },
          Value: {
            type: string,
            nullable: true
          }
        }
      },
      TestCasesAntiforgeryTestVerificationRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          File: {
            type: string,
            format: binary
          },
          TokenResponse: null
        }
      },
      SalesOrdersRetrieveResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Message: {
            type: string
          }
        }
      },
      SalesOrdersRetrieveRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          TenantID: {
            type: string,
            description: this is the tenant id
          }
        }
      },
      SalesOrdersCreateResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          OrderID: {
            type: integer,
            format: int32
          },
          Message: {
            type: string,
            nullable: true
          },
          AnotherMsg: {
            type: string,
            nullable: true
          },
          GuidTest: {
            type: string,
            format: guid
          },
          Event: null
        }
      },
      TestCasesEventHandlingTestSomeEvent: {
        type: object,
        additionalProperties: false,
        properties: {
          One: {
            type: integer,
            format: int32
          },
          Two: {
            type: integer,
            format: int32
          }
        }
      },
      SalesOrdersCreateRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          CustomerID: {
            type: integer,
            format: int32
          },
          ProductID: {
            type: integer,
            format: int32
          },
          Quantity: {
            type: integer,
            format: int32
          }
        }
      },
      InventoryManageUpdateRequest: {
        type: object,
        additionalProperties: false,
        required: [
          Id,
          Name,
          ModifiedBy
        ],
        properties: {
          Id: {
            type: integer,
            format: int32,
            minLength: 1,
            nullable: false
          },
          Name: {
            type: string,
            minLength: 1,
            nullable: false
          },
          Description: {
            type: string,
            nullable: true
          },
          Price: {
            type: number,
            format: decimal,
            minimum: 0.0,
            exclusiveMinimum: true
          },
          QtyOnHand: {
            type: integer,
            format: int32
          },
          ModifiedBy: {
            type: string,
            minLength: 1,
            nullable: false
          }
        }
      },
      InventoryManageDeleteRequest: {
        type: object,
        additionalProperties: false
      },
      InventoryManageCreateRequest: {
        type: object,
        additionalProperties: false,
        required: [
          Name,
          ModifiedBy
        ],
        properties: {
          Id: {
            type: integer,
            format: int32
          },
          Name: {
            type: string,
            minLength: 1,
            nullable: false
          },
          Description: {
            type: string,
            nullable: true
          },
          Price: {
            type: number,
            format: decimal,
            minimum: 0.0,
            exclusiveMinimum: true
          },
          QtyOnHand: {
            type: integer,
            format: int32
          },
          ModifiedBy: {
            type: string,
            minLength: 1,
            nullable: false
          },
          GenerateFullUrl: {
            type: boolean
          }
        }
      },
      InventoryListRecentResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Category: {
            type: string,
            nullable: true
          }
        }
      },
      InventoryGetProductResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          ProductID: {
            type: string,
            nullable: true
          },
          Last_Moddded: {
            type: integer,
            description: blah blah blah,
            format: int64
          }
        }
      },
      CustomersUpdateRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Age: {
            type: integer,
            format: int32
          },
          Address: {
            type: string
          }
        }
      },
      CustomersUpdateWithHeaderRequest: {
        type: object,
        additionalProperties: false,
        properties: {
          Name: {
            type: string
          },
          Age: {
            type: integer,
            format: int32
          },
          Address: {
            type: string
          }
        }
      },
      CustomersListRecentResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          Customers: {
            type: array,
            nullable: true,
            items: null
          }
        }
      },
      SystemCollectionsGenericKeyValuePairOfStringAndInt32: {
        type: object,
        additionalProperties: false,
        properties: {
          Key: {
            type: string,
            nullable: true
          },
          Value: {
            type: integer,
            format: int32
          }
        }
      },
      CustomersCreateRequest: {
        type: object,
        additionalProperties: false
      },
      CustomersCreateWithPropertiesDIRequest: {
        type: object,
        additionalProperties: false
      },
      AdminLoginResponse: {
        type: object,
        additionalProperties: false,
        properties: {
          JWTToken: {
            type: string,
            description: the jwt token,
            example: blahblahblah
          },
          ExpiryDate: {
            type: string,
            format: date-time
          },
          Permissions: {
            type: array,
            items: {
              type: string
            }
          }
        }
      },
      AdminLoginRequest: {
        type: object,
        description: the admin login request,
        example: {
          UserName: custom example user name from summary,
          Password: custom example password from summary
        },
        additionalProperties: false,
        required: [
          UserName,
          Password
        ],
        properties: {
          UserName: {
            type: string,
            description: overriden username text,
            default: admin,
            maxLength: 50,
            minLength: 1,
            nullable: false,
            example: example username
          },
          Password: {
            type: string,
            description: the admin password,
            minLength: 1,
            nullable: false,
            example: example password
          }
        }
      }
    },
    securitySchemes: {
      JWTBearerAuth: {
        type: http,
        description: Enter a JWT token to authorize the requests...,
        scheme: Bearer,
        bearerFormat: JWT
      }
    }
  }
}